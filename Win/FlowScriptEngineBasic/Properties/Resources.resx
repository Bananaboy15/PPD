<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArrayList_AddRange_Summary" xml:space="preserve">
    <value>ArrayListにArrayListを加えます</value>
  </data>
  <data name="ArrayList_AddRange_Value" xml:space="preserve">
    <value>加えるArrayListです</value>
  </data>
  <data name="ArrayList_Add_Summary" xml:space="preserve">
    <value>ArrayListに要素を加えます</value>
  </data>
  <data name="ArrayList_Add_Value" xml:space="preserve">
    <value>加える要素です</value>
  </data>
  <data name="ArrayList_ArrayList" xml:space="preserve">
    <value>メソッドの対象となるArrayListです</value>
  </data>
  <data name="ArrayList_At_Index" xml:space="preserve">
    <value>取得するインデックスです</value>
  </data>
  <data name="ArrayList_At_Remark" xml:space="preserve">
    <value>Indexは0から始まり、Count未満の値である必要があります</value>
  </data>
  <data name="ArrayList_At_Summary" xml:space="preserve">
    <value>ArrayListの指定したインデックスの要素を取得します</value>
  </data>
  <data name="ArrayList_At_Value" xml:space="preserve">
    <value>取得した要素です</value>
  </data>
  <data name="ArrayList_Clear_Summary" xml:space="preserve">
    <value>ArrayListの要素をすべてクリアします</value>
  </data>
  <data name="ArrayList_Contains_Object" xml:space="preserve">
    <value>含まれているか調べる要素です</value>
  </data>
  <data name="ArrayList_Contains_Summary" xml:space="preserve">
    <value>ArrayListに指定した要素が含まれているかを調べます</value>
  </data>
  <data name="ArrayList_Contains_Value" xml:space="preserve">
    <value>ふくまれていたかどうかです</value>
  </data>
  <data name="ArrayList_Count_Summary" xml:space="preserve">
    <value>ArrayListの要素の数を取得します</value>
  </data>
  <data name="ArrayList_Count_Value" xml:space="preserve">
    <value>要素の数です</value>
  </data>
  <data name="ArrayList_GetRange_Count" xml:space="preserve">
    <value>取得する数です</value>
  </data>
  <data name="ArrayList_GetRange_Index" xml:space="preserve">
    <value>取得を開始するインデックスです</value>
  </data>
  <data name="ArrayList_GetRange_Summary" xml:space="preserve">
    <value>ArrayListの指定したインデックスから指定した数の要素を持つArrayListを取得します</value>
  </data>
  <data name="ArrayList_GetRange_Value" xml:space="preserve">
    <value>取得したArrayListです</value>
  </data>
  <data name="ArrayList_IndexOf_Object" xml:space="preserve">
    <value>インデックスを調べる要素です</value>
  </data>
  <data name="ArrayList_IndexOf_Remark" xml:space="preserve">
    <value>ArrayList内に指定した要素が含まれていない場合はValueは -1 になります</value>
  </data>
  <data name="ArrayList_IndexOf_Summary" xml:space="preserve">
    <value>ArrayList内で指定した要素が最初に現れるインデックスを取得します</value>
  </data>
  <data name="ArrayList_IndexOf_Value" xml:space="preserve">
    <value>要素のインデックスです</value>
  </data>
  <data name="ArrayList_InsertRange_Index" xml:space="preserve">
    <value>挿入を開始するインデックスです</value>
  </data>
  <data name="ArrayList_InsertRange_Summary" xml:space="preserve">
    <value>ArrayListの指定したインデックスに別のArrayListを挿入します</value>
  </data>
  <data name="ArrayList_InsertRange_Value" xml:space="preserve">
    <value>挿入するArrayListです</value>
  </data>
  <data name="ArrayList_Insert_Index" xml:space="preserve">
    <value>挿入するインデックスです</value>
  </data>
  <data name="ArrayList_Insert_Summary" xml:space="preserve">
    <value>ArrayListに指定した要素を指定したインデックスに挿入します</value>
  </data>
  <data name="ArrayList_Insert_Value" xml:space="preserve">
    <value>挿入する要素です</value>
  </data>
  <data name="ArrayList_LastIndexOf_Object" xml:space="preserve">
    <value>インデックスを調べる要素です</value>
  </data>
  <data name="ArrayList_LastIndexOf_Remark" xml:space="preserve">
    <value>ArrayList内に指定した要素が含まれていない場合はValueは -1 になります</value>
  </data>
  <data name="ArrayList_LastIndexOf_Summary" xml:space="preserve">
    <value>ArrayList内で指定した要素が最後に現れるインデックスを取得します</value>
  </data>
  <data name="ArrayList_LastIndexOf_Value" xml:space="preserve">
    <value>要素のインデックスです</value>
  </data>
  <data name="ArrayList_RemoveAt_Summary" xml:space="preserve">
    <value>ArrayList内の指定したインデックスの要素を削除します</value>
  </data>
  <data name="ArrayList_RemoveAt_Value" xml:space="preserve">
    <value>削除するインデックスです</value>
  </data>
  <data name="ArrayList_RemoveRange_Count" xml:space="preserve">
    <value>削除する数です</value>
  </data>
  <data name="ArrayList_RemoveRange_Index" xml:space="preserve">
    <value>削除を開始するインデックスです</value>
  </data>
  <data name="ArrayList_RemoveRange_Summary" xml:space="preserve">
    <value>ArrayListで指定したインデックスから指定した数の要素を削除します</value>
  </data>
  <data name="ArrayList_Remove_Summary" xml:space="preserve">
    <value>ArrayListから指定した要素を削除します</value>
  </data>
  <data name="ArrayList_Remove_Value" xml:space="preserve">
    <value>削除する要素です</value>
  </data>
  <data name="ArrayList_Repeat_Count" xml:space="preserve">
    <value>生成する数です</value>
  </data>
  <data name="ArrayList_Repeat_Object" xml:space="preserve">
    <value>生成元の要素です</value>
  </data>
  <data name="ArrayList_Repeat_Summary" xml:space="preserve">
    <value>指定した要素を指定した数だけ持つArrayListを生成します</value>
  </data>
  <data name="ArrayList_Repeat_Value" xml:space="preserve">
    <value>生成されたArrayListです</value>
  </data>
  <data name="ArrayList_Reverse_Summary" xml:space="preserve">
    <value>ArrayListの要素の順番をを反転します</value>
  </data>
  <data name="ArrayList_SetRange_Index" xml:space="preserve">
    <value>置き換えを開始するインデックスです</value>
  </data>
  <data name="ArrayList_SetRange_Summary" xml:space="preserve">
    <value>ArrayList内の指定したインデックスから始まる要素を別のArrayListの要素で置き換えます</value>
  </data>
  <data name="ArrayList_SetRange_Value" xml:space="preserve">
    <value>置き換える元のArrayListです</value>
  </data>
  <data name="Boolean_FalseString_Summary" xml:space="preserve">
    <value>偽の文字列を取得します</value>
  </data>
  <data name="Boolean_FalseString_Value" xml:space="preserve">
    <value>偽の文字列です</value>
  </data>
  <data name="Boolean_Parse_Fail" xml:space="preserve">
    <value>変換失敗時に実行されます</value>
  </data>
  <data name="Boolean_Parse_Result" xml:space="preserve">
    <value>変換の成否です</value>
  </data>
  <data name="Boolean_Parse_Success" xml:space="preserve">
    <value>変換成功時に実行されます</value>
  </data>
  <data name="Boolean_Parse_Summary" xml:space="preserve">
    <value>StringをBooleanに変換します</value>
  </data>
  <data name="Boolean_Parse_Value" xml:space="preserve">
    <value>変換する文字列です</value>
  </data>
  <data name="Boolean_TrueString_Summary" xml:space="preserve">
    <value>真の文字列を取得します</value>
  </data>
  <data name="Boolean_TrueString_Value" xml:space="preserve">
    <value>真の文字列です</value>
  </data>
  <data name="Boolean_Value_Summary" xml:space="preserve">
    <value>真偽値を表すBooleanの値です</value>
  </data>
  <data name="Logic_If_Condition" xml:space="preserve">
    <value>真偽判断に使用する条件です</value>
  </data>
  <data name="Logic_If_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Logic_If_OnFalse" xml:space="preserve">
    <value>Conditionが偽の時に実行されます</value>
  </data>
  <data name="Logic_If_OnTrue" xml:space="preserve">
    <value>Conditionが真の時に実行されます</value>
  </data>
  <data name="Logic_If_Remark" xml:space="preserve">
    <value>Conditionが真ならOnTrue, 偽ならOnFalseを実行します</value>
  </data>
  <data name="Logic_If_Summary" xml:space="preserve">
    <value>条件に応じて使用するトリガーを変更します</value>
  </data>
  <data name="Misc_EntryPoint_Start" xml:space="preserve">
    <value>FlowScriptの実行開始時に実行されます</value>
  </data>
  <data name="Misc_EntryPoint_Summary" xml:space="preserve">
    <value>FlowScriptの実行開始時に呼ばれます</value>
  </data>
  <data name="Object_Equal_A" xml:space="preserve">
    <value>ひとつめの比較対象です</value>
  </data>
  <data name="Object_Equal_B" xml:space="preserve">
    <value>ふたつめの比較対象です</value>
  </data>
  <data name="Object_Equal_Remark" xml:space="preserve">
    <value>A == Bを取得します</value>
  </data>
  <data name="Object_Equal_Summary" xml:space="preserve">
    <value>Objectの値が等しいかを取得します</value>
  </data>
  <data name="Object_Equal_Value" xml:space="preserve">
    <value>等しいかどうかです</value>
  </data>
  <data name="Repeat_DoWhile_Condition" xml:space="preserve">
    <value>リピートを継続するかです</value>
  </data>
  <data name="Repeat_DoWhile_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Repeat_DoWhile_Loop" xml:space="preserve">
    <value>リピート時に実行されます</value>
  </data>
  <data name="Repeat_DoWhile_Remark" xml:space="preserve">
    <value>ConditionはLoop実行後に評価され、偽の場合リピートが終了します</value>
  </data>
  <data name="Repeat_DoWhile_Summary" xml:space="preserve">
    <value>一度は実行されるリピート処理です</value>
  </data>
  <data name="Repeat_Foreach_ArrayList" xml:space="preserve">
    <value>リピート回数の元となるArrayListです</value>
  </data>
  <data name="Repeat_Foreach_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Repeat_Foreach_Iter" xml:space="preserve">
    <value>リピート回数です</value>
  </data>
  <data name="Repeat_Foreach_Loop" xml:space="preserve">
    <value>リピート時に実行されます</value>
  </data>
  <data name="Repeat_Foreach_Summary" xml:space="preserve">
    <value>ArrayListの要素の数だけリピート処理を行います</value>
  </data>
  <data name="Repeat_Foreach_Value" xml:space="preserve">
    <value>リピート時のArrayListの要素です</value>
  </data>
  <data name="Repeat_For_Condition" xml:space="preserve">
    <value>リピートするかどうかです</value>
  </data>
  <data name="Repeat_For_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Repeat_For_Init" xml:space="preserve">
    <value>初期化時に実行されます</value>
  </data>
  <data name="Repeat_For_Loop" xml:space="preserve">
    <value>リピート時に実行されます</value>
  </data>
  <data name="Repeat_For_LoopEnd" xml:space="preserve">
    <value>リピート終了時に実行されます</value>
  </data>
  <data name="Repeat_For_Summary" xml:space="preserve">
    <value>初期化後に条件を評価し真の場合にリピート処理を行い、再度条件を評価しリピート処理を行います</value>
  </data>
  <data name="Repeat_While_Condition" xml:space="preserve">
    <value>リピートするかどうかです</value>
  </data>
  <data name="Repeat_While_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Repeat_While_Loop" xml:space="preserve">
    <value>リピート時に実行されます</value>
  </data>
  <data name="Repeat_While_Summary" xml:space="preserve">
    <value>条件を評価し真の場合にリピート処理を行い、再度条件を評価し真の場合にリピート処理を行います</value>
  </data>
  <data name="Scope_GetValue_Remark" xml:space="preserve">
    <value>ValueNameに対応する値が存在しなければエラーが出ます</value>
  </data>
  <data name="Scope_GetValue_Summary" xml:space="preserve">
    <value>ノードが存在するスコープから値を取得します</value>
  </data>
  <data name="Scope_GetValue_Value" xml:space="preserve">
    <value>取得した値です</value>
  </data>
  <data name="Scope_GetValue_ValueName" xml:space="preserve">
    <value>取得する名前です</value>
  </data>
  <data name="Scope_SetValue_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Scope_SetValue_Remark" xml:space="preserve">
    <value>すでに指定したValueNameに対応する値がある場合、上書きされます</value>
  </data>
  <data name="Scope_SetValue_Summary" xml:space="preserve">
    <value>ノードが存在するスコープに値を追加、代入します</value>
  </data>
  <data name="Scope_SetValue_Value" xml:space="preserve">
    <value>設定する値です</value>
  </data>
  <data name="Scope_SetValue_ValueName" xml:space="preserve">
    <value>設定する名前です</value>
  </data>
  <data name="TemplateClass_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="TemplateStruct_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Logic_All_In0" xml:space="preserve">
    <value>１つ目の実行メソッドです</value>
  </data>
  <data name="Logic_All_In1" xml:space="preserve">
    <value>２つ目の実行メソッドです</value>
  </data>
  <data name="Logic_All_In2" xml:space="preserve">
    <value>３つ目の実行メソッドです</value>
  </data>
  <data name="Logic_All_In3" xml:space="preserve">
    <value>４つ目の実行メソッドです</value>
  </data>
  <data name="Logic_All_In4" xml:space="preserve">
    <value>５つ目の実行メソッドです</value>
  </data>
  <data name="Logic_All_In5" xml:space="preserve">
    <value>６つ目の実行メソッドです</value>
  </data>
  <data name="Logic_All_Out" xml:space="preserve">
    <value>全て実行された後に実行されます</value>
  </data>
  <data name="Logic_All_Remark" xml:space="preserve">
    <value>リンクがあるメソッドが全て実行された場合にOutが実行されます</value>
  </data>
  <data name="Logic_All_Reset" xml:space="preserve">
    <value>実行状態をリセットします</value>
  </data>
  <data name="Logic_All_Summary" xml:space="preserve">
    <value>全てのメソッドが呼ばれた時に実行します</value>
  </data>
  <data name="Logic_And_A" xml:space="preserve">
    <value>ひとつめの演算引数です</value>
  </data>
  <data name="Logic_And_B" xml:space="preserve">
    <value>ふたつめの演算引数です</value>
  </data>
  <data name="Logic_And_Remark" xml:space="preserve">
    <value>A &amp;&amp; Bを行います。Aが真かつBが真のときValueが真になります、それ以外はValueは偽になります</value>
  </data>
  <data name="Logic_And_Summary" xml:space="preserve">
    <value>Booleanに対してAND演算を行います</value>
  </data>
  <data name="Logic_And_Value" xml:space="preserve">
    <value>ANDの演算結果です</value>
  </data>
  <data name="Hashtable_Add_Key" xml:space="preserve">
    <value>追加するキーです</value>
  </data>
  <data name="Hashtable_Add_Summary" xml:space="preserve">
    <value>ハッシュテーブルにキーとバリューのペアを追加します</value>
  </data>
  <data name="Hashtable_Add_Value" xml:space="preserve">
    <value>追加するバリューです</value>
  </data>
  <data name="Hashtable_Clear_Summary" xml:space="preserve">
    <value>ハッシュテーブルの中身を空にします</value>
  </data>
  <data name="Hashtable_ContainsKey_Key" xml:space="preserve">
    <value>調べるキーです</value>
  </data>
  <data name="Hashtable_ContainsKey_Summary" xml:space="preserve">
    <value>ハッシュテーブルにキーがあるかどうかを取得します</value>
  </data>
  <data name="Hashtable_ContainsKey_Value" xml:space="preserve">
    <value>キーが存在していたかどうかです</value>
  </data>
  <data name="Hashtable_ContainsValue_Contains" xml:space="preserve">
    <value>バリューが存在していたかどうかです</value>
  </data>
  <data name="Hashtable_ContainsValue_Summary" xml:space="preserve">
    <value>ハッシュテーブルにバリューが存在しているかどうかを取得します</value>
  </data>
  <data name="Hashtable_ContainsValue_Value" xml:space="preserve">
    <value>調べるバリューです</value>
  </data>
  <data name="Hashtable_Count_Summary" xml:space="preserve">
    <value>ハッシュテーブルに含まれているペアの数を取得します</value>
  </data>
  <data name="Hashtable_Count_Value" xml:space="preserve">
    <value>ペアの数です</value>
  </data>
  <data name="Hashtable_GetValue_Key" xml:space="preserve">
    <value>取得するバリューのキーです</value>
  </data>
  <data name="Hashtable_GetValue_Summary" xml:space="preserve">
    <value>ハッシュテーブルから指定したキーに対応するバリューを取得します</value>
  </data>
  <data name="Hashtable_GetValue_Value" xml:space="preserve">
    <value>取得したバリューです</value>
  </data>
  <data name="Hashtable_Hashtable" xml:space="preserve">
    <value>対象のハッシュテーブルです</value>
  </data>
  <data name="Hashtable_Keys_Remark" xml:space="preserve">
    <value>Inメソッド実行後にハッシュテーブルを変更した場合、変更はValueに適用されないので注意してください</value>
  </data>
  <data name="Hashtable_Keys_Summary" xml:space="preserve">
    <value>ハッシュテーブルのキー配列を取得します</value>
  </data>
  <data name="Hashtable_Keys_Value" xml:space="preserve">
    <value>キー配列です</value>
  </data>
  <data name="Hashtable_Remove_Key" xml:space="preserve">
    <value>取り除くペアのキーです</value>
  </data>
  <data name="Hashtable_Remove_Summary" xml:space="preserve">
    <value>ハッシュテーブルから指定したキーのペアを取り除きます</value>
  </data>
  <data name="Hashtable_Values_Remark" xml:space="preserve">
    <value>Inメソッド実行後にハッシュテーブルを変更した場合、変更はValueに適用されないので注意してください</value>
  </data>
  <data name="Hashtable_Values_Summary" xml:space="preserve">
    <value>ハッシュテーブルのバリュー配列を取得します</value>
  </data>
  <data name="Hashtable_Values_Value" xml:space="preserve">
    <value>バリュー配列です</value>
  </data>
  <data name="Logic_Any_In0" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Logic_Any_In1" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Logic_Any_In2" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Logic_Any_In3" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Logic_Any_In4" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Logic_Any_In5" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Logic_Any_Out" xml:space="preserve">
    <value>In0~In5のいずれかのメソッドが実行されたときに実行されるイベントです</value>
  </data>
  <data name="Logic_Any_Remark" xml:space="preserve">
    <value>全ての入力につなぐ必要はありません</value>
  </data>
  <data name="Logic_Any_Summary" xml:space="preserve">
    <value>いずれかの入力メソッドが実行されたときに実行します</value>
  </data>
  <data name="Logic_Not_Summary" xml:space="preserve">
    <value>Booleanに対してNOT演算を行います</value>
  </data>
  <data name="Logic_Not_Value" xml:space="preserve">
    <value>否定するBooleanの値です</value>
  </data>
  <data name="Logic_Or_Remark" xml:space="preserve">
    <value>A || Bを行います。Aが真またはBが真のときValueが真になります、それ以外はValueは偽になります</value>
  </data>
  <data name="Logic_Or_Summary" xml:space="preserve">
    <value>Booleanに対してOR演算を行います</value>
  </data>
  <data name="Logic_Or_Value" xml:space="preserve">
    <value>ORの演算結果です</value>
  </data>
  <data name="Logic_Sequential_Out0" xml:space="preserve">
    <value>一つ目のイベントです</value>
  </data>
  <data name="Logic_Sequential_Out1" xml:space="preserve">
    <value>二つ目のイベントです</value>
  </data>
  <data name="Logic_Sequential_Out2" xml:space="preserve">
    <value>三つ目のイベントです</value>
  </data>
  <data name="Logic_Sequential_Out3" xml:space="preserve">
    <value>四つ目のイベントです</value>
  </data>
  <data name="Logic_Sequential_Out4" xml:space="preserve">
    <value>五つ目のイベントです</value>
  </data>
  <data name="Logic_Sequential_Out5" xml:space="preserve">
    <value>六つ目のイベントです</value>
  </data>
  <data name="Logic_Sequential_Out6" xml:space="preserve">
    <value>七つ目のイベントです</value>
  </data>
  <data name="Logic_Sequential_Summary" xml:space="preserve">
    <value>イベントを順番に実行します</value>
  </data>
  <data name="Logic_Xor_Remark" xml:space="preserve">
    <value>A ^ Bを計算します。Aが真かつBが偽、またはAが偽かつBが真のときValueが真になります、それ以外はValueは偽になります</value>
  </data>
  <data name="Logic_Xor_Summary" xml:space="preserve">
    <value>Booleanに対してXOR演算を行います</value>
  </data>
  <data name="Logic_Xor_Value" xml:space="preserve">
    <value>XORの演算結果です</value>
  </data>
  <data name="Math_Abs_A" xml:space="preserve">
    <value>絶対値を計算する数値です</value>
  </data>
  <data name="Math_Abs_Summary" xml:space="preserve">
    <value>数値の絶対値を計算します</value>
  </data>
  <data name="Math_Abs_Value" xml:space="preserve">
    <value>絶対値を計算した数値です</value>
  </data>
  <data name="Math_Acos_A" xml:space="preserve">
    <value>アークコサインを計算する数値です</value>
  </data>
  <data name="Math_Acos_Summary" xml:space="preserve">
    <value>アークコサインを計算します</value>
  </data>
  <data name="Math_Acos_Value" xml:space="preserve">
    <value>アークコサインを計算した数値です</value>
  </data>
  <data name="Math_Asin_A" xml:space="preserve">
    <value>アークサインを計算する数値です</value>
  </data>
  <data name="Math_Asin_Summary" xml:space="preserve">
    <value>アークサインを計算します</value>
  </data>
  <data name="Math_Asin_Value" xml:space="preserve">
    <value>アークサインを計算した数値です</value>
  </data>
  <data name="Math_Atan2_Remark" xml:space="preserve">
    <value>Value = arctan(Y/X)になります</value>
  </data>
  <data name="Math_Atan2_Summary" xml:space="preserve">
    <value>二つの引数の商になるアークタンジェントを計算します</value>
  </data>
  <data name="Math_Atan2_Value" xml:space="preserve">
    <value>アークタンジェントの値</value>
  </data>
  <data name="Math_Atan_A" xml:space="preserve">
    <value>アークタンジェントを計算する数値です</value>
  </data>
  <data name="Math_Atan_Summary" xml:space="preserve">
    <value>アークタンジェントを計算します</value>
  </data>
  <data name="Math_Atan_Value" xml:space="preserve">
    <value>アークタンジェントを計算した数値です</value>
  </data>
  <data name="Math_Ceiling_A" xml:space="preserve">
    <value>天井関数を計算する数値です</value>
  </data>
  <data name="Math_Ceiling_Summary" xml:space="preserve">
    <value>天井関数を計算します</value>
  </data>
  <data name="Math_Ceiling_Value" xml:space="preserve">
    <value>天井関数を計算した数値です</value>
  </data>
  <data name="Math_Cosh_A" xml:space="preserve">
    <value>ハイパボリックコサインを計算する数値です</value>
  </data>
  <data name="Math_Cosh_Summary" xml:space="preserve">
    <value>ハイパボリックコサインを計算します</value>
  </data>
  <data name="Math_Cosh_Value" xml:space="preserve">
    <value>ハイパボリックコサインを計算した数値です</value>
  </data>
  <data name="Math_Cos_A" xml:space="preserve">
    <value>コサインを計算する数値です</value>
  </data>
  <data name="Math_Cos_Summary" xml:space="preserve">
    <value>コサインを計算します</value>
  </data>
  <data name="Math_Cos_Value" xml:space="preserve">
    <value>コサインを計算した数値です</value>
  </data>
  <data name="Math_DivRem_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Math_DivRem_Quotient" xml:space="preserve">
    <value>商です</value>
  </data>
  <data name="Math_DivRem_Remainder" xml:space="preserve">
    <value>剰余です</value>
  </data>
  <data name="Math_DivRem_Remark" xml:space="preserve">
    <value>A=B*Quotient+Remainderです</value>
  </data>
  <data name="Math_DivRem_Summary" xml:space="preserve">
    <value>商と剰余を計算します</value>
  </data>
  <data name="Math_Exp_A" xml:space="preserve">
    <value>べきの数値です</value>
  </data>
  <data name="Math_Exp_Summary" xml:space="preserve">
    <value>自然対数の底を底とする指数関数を計算します</value>
  </data>
  <data name="Math_Exp_Value" xml:space="preserve">
    <value>自然対数の底を底とする指数関数を計算した数値です</value>
  </data>
  <data name="Math_E_Summary" xml:space="preserve">
    <value>自然対数の底を取得します</value>
  </data>
  <data name="Math_E_Value" xml:space="preserve">
    <value>自然対数の底です</value>
  </data>
  <data name="Math_Floor_A" xml:space="preserve">
    <value>床関数を計算する数値です</value>
  </data>
  <data name="Math_Floor_Summary" xml:space="preserve">
    <value>床関数を計算します</value>
  </data>
  <data name="Math_Floor_Value" xml:space="preserve">
    <value>床関数を計算した数値です</value>
  </data>
  <data name="Math_IEEERemainder_Remark" xml:space="preserve">
    <value>x - ( y Q) に等しい数値。Q は x / y の商を丸めた近似整数を示します。x / y が 2 つの整数の中間に位置する場合は、偶数の整数が返されます。 x - ( y Q) が 0 のとき、x が正である場合は値 +0 が、x が負である場合は値 -0 が返されます。 y = 0 の場合は、NaN (Not-A-Number) が返されます。</value>
  </data>
  <data name="Math_IEEERemainder_Summary" xml:space="preserve">
    <value>IEEEによって定められた剰余を計算します</value>
  </data>
  <data name="Math_IEEERemainder_Value" xml:space="preserve">
    <value>計算された剰余です</value>
  </data>
  <data name="Math_Log10_A" xml:space="preserve">
    <value>10を底とする対数を計算する数値です</value>
  </data>
  <data name="Math_Log10_Summary" xml:space="preserve">
    <value>10を底とする対数を計算します</value>
  </data>
  <data name="Math_Log10_Value" xml:space="preserve">
    <value>10を底とする対数を計算した数値です</value>
  </data>
  <data name="Math_Log_A" xml:space="preserve">
    <value>自然対数の底を底とする対数を計算する数値です</value>
  </data>
  <data name="Math_Log_Summary" xml:space="preserve">
    <value>自然対数の底を底とする対数を計算します</value>
  </data>
  <data name="Math_Log_Value" xml:space="preserve">
    <value>自然対数の底を底とする対数を計算した数値です</value>
  </data>
  <data name="Math_Max_Summary" xml:space="preserve">
    <value>最大値を計算します</value>
  </data>
  <data name="Math_Max_Value" xml:space="preserve">
    <value>最大値です</value>
  </data>
  <data name="Math_Min_Summary" xml:space="preserve">
    <value>最小値を計算します</value>
  </data>
  <data name="Math_Min_Value" xml:space="preserve">
    <value>最小値です</value>
  </data>
  <data name="Math_Pi_Summary" xml:space="preserve">
    <value>円周率を取得します</value>
  </data>
  <data name="Math_Pi_Value" xml:space="preserve">
    <value>円周率です</value>
  </data>
  <data name="Math_Pow_Remark" xml:space="preserve">
    <value>AのB乗を計算します</value>
  </data>
  <data name="Math_Pow_Summary" xml:space="preserve">
    <value>べき乗を計算します</value>
  </data>
  <data name="Math_Pow_Value" xml:space="preserve">
    <value>べき乗です</value>
  </data>
  <data name="Math_Round_A" xml:space="preserve">
    <value>丸める数値です</value>
  </data>
  <data name="Math_Round_B" xml:space="preserve">
    <value>丸める小数点以下の桁です</value>
  </data>
  <data name="Math_Round_Summary" xml:space="preserve">
    <value>小数点以下を丸めます</value>
  </data>
  <data name="Math_Round_Value" xml:space="preserve">
    <value>丸めた数値です</value>
  </data>
  <data name="Math_Sign_A" xml:space="preserve">
    <value>符号を取る数値です</value>
  </data>
  <data name="Math_Sign_Remark" xml:space="preserve">
    <value>プラスなら1、マイナスなら-1、ゼロなら0を返します</value>
  </data>
  <data name="Math_Sign_Summary" xml:space="preserve">
    <value>符号を取ります</value>
  </data>
  <data name="Math_Sign_Value" xml:space="preserve">
    <value>符号です</value>
  </data>
  <data name="Math_Sinh_A" xml:space="preserve">
    <value>ハイパボリックサインを計算する数値です</value>
  </data>
  <data name="Math_Sinh_Summary" xml:space="preserve">
    <value>ハイパボリックサインを計算します</value>
  </data>
  <data name="Math_Sinh_Value" xml:space="preserve">
    <value>ハイパボリックサインを計算した数値です</value>
  </data>
  <data name="Math_Sin_A" xml:space="preserve">
    <value>サインを計算する値です</value>
  </data>
  <data name="Math_Sin_Summary" xml:space="preserve">
    <value>サインを計算します</value>
  </data>
  <data name="Math_Sin_Value" xml:space="preserve">
    <value>サインを計算した値です</value>
  </data>
  <data name="Math_Sqrt_A" xml:space="preserve">
    <value>平方根を計算する数値です</value>
  </data>
  <data name="Math_Sqrt_Summary" xml:space="preserve">
    <value>平方根を計算します</value>
  </data>
  <data name="Math_Sqrt_Value" xml:space="preserve">
    <value>平方根を計算した数値です</value>
  </data>
  <data name="Math_Tanh_A" xml:space="preserve">
    <value>ハイパボリックタンジェントを計算する数値です</value>
  </data>
  <data name="Math_Tanh_Summary" xml:space="preserve">
    <value>ハイパボリックタンジェントを計算します</value>
  </data>
  <data name="Math_Tanh_Value" xml:space="preserve">
    <value>ハイパボリックタンジェントを計算した数値です</value>
  </data>
  <data name="Math_Tan_A" xml:space="preserve">
    <value>タンジェントを計算する値です</value>
  </data>
  <data name="Math_Tan_Summary" xml:space="preserve">
    <value>タンジェントを計算します</value>
  </data>
  <data name="Math_Tan_Value" xml:space="preserve">
    <value>タンジェントを計算した値です</value>
  </data>
  <data name="Math_Truncate_A" xml:space="preserve">
    <value>小数の整数部分を計算する数値です</value>
  </data>
  <data name="Math_Truncate_Summary" xml:space="preserve">
    <value>小数の整数部分を計算します</value>
  </data>
  <data name="Math_Truncate_Value" xml:space="preserve">
    <value>小数の整数部分の数値です</value>
  </data>
  <data name="String_Add_A" xml:space="preserve">
    <value>結合する文字列（先）です</value>
  </data>
  <data name="String_Add_B" xml:space="preserve">
    <value>結合する文字列（後）です</value>
  </data>
  <data name="String_Add_Summary" xml:space="preserve">
    <value>文字列を結合します</value>
  </data>
  <data name="String_Add_Value" xml:space="preserve">
    <value>結合した文字列です</value>
  </data>
  <data name="String_CompareTo_A" xml:space="preserve">
    <value>一つ目の比べる文字列です</value>
  </data>
  <data name="String_CompareTo_B" xml:space="preserve">
    <value>二つ目の比べる文字列です</value>
  </data>
  <data name="String_CompareTo_Remark" xml:space="preserve">
    <value>AとBが等しいなら0、AがBよりも大きければ0より大きい値、そうでなければ0よりも小さい値を返します</value>
  </data>
  <data name="String_CompareTo_Summary" xml:space="preserve">
    <value>文字列を比較します</value>
  </data>
  <data name="String_CompareTo_Value" xml:space="preserve">
    <value>比べた結果です</value>
  </data>
  <data name="String_Contains_A" xml:space="preserve">
    <value>含むか調べる文字列です</value>
  </data>
  <data name="String_Contains_B" xml:space="preserve">
    <value>含まれるかを調べる文字列です</value>
  </data>
  <data name="String_Contains_Summary" xml:space="preserve">
    <value>文字列が含まれるかどうかを調べます</value>
  </data>
  <data name="String_Contains_Value" xml:space="preserve">
    <value>含まれるかどうかです</value>
  </data>
  <data name="String_EndsWith_A" xml:space="preserve">
    <value>文字列全体です</value>
  </data>
  <data name="String_EndsWith_B" xml:space="preserve">
    <value>終端文字列です</value>
  </data>
  <data name="String_EndsWith_Summary" xml:space="preserve">
    <value>文字列がある文字列で終わるかどうかを調べます</value>
  </data>
  <data name="String_EndsWith_Value" xml:space="preserve">
    <value>終端文字列で終わるかどうかです</value>
  </data>
  <data name="String_Equal_A" xml:space="preserve">
    <value>一つ目の比較する文字列です</value>
  </data>
  <data name="String_Equal_B" xml:space="preserve">
    <value>二つ目の比較する文字列です</value>
  </data>
  <data name="String_Equal_Summary" xml:space="preserve">
    <value>文字列を比較します</value>
  </data>
  <data name="String_Equal_Value" xml:space="preserve">
    <value>等しいかどうかです</value>
  </data>
  <data name="String_IndexOf_A" xml:space="preserve">
    <value>文字列全体です</value>
  </data>
  <data name="String_IndexOf_B" xml:space="preserve">
    <value>位置を調べる文字列です</value>
  </data>
  <data name="String_IndexOf_Remark" xml:space="preserve">
    <value>含まれない場合は-1、含まれる位置は最初の文字の位置を0とした位置なります</value>
  </data>
  <data name="String_IndexOf_Summary" xml:space="preserve">
    <value>文字列にある文字列が含まれる最初の位置を取得します</value>
  </data>
  <data name="String_IndexOf_Value" xml:space="preserve">
    <value>調べた位置です</value>
  </data>
  <data name="String_Insert_A" xml:space="preserve">
    <value>文字列全体です</value>
  </data>
  <data name="String_Insert_B" xml:space="preserve">
    <value>挿入する文字列です</value>
  </data>
  <data name="String_Insert_Index" xml:space="preserve">
    <value>挿入する位置です</value>
  </data>
  <data name="String_Insert_Remark" xml:space="preserve">
    <value>挿入する位置は0~(Aの長さ)の値でなければなりません。</value>
  </data>
  <data name="String_Insert_Summary" xml:space="preserve">
    <value>文字列指定した位置に指定した文字列を挿入します</value>
  </data>
  <data name="String_Insert_Value" xml:space="preserve">
    <value>挿入が行われた後の文字列です</value>
  </data>
  <data name="String_IsNullOrEmpty_A" xml:space="preserve">
    <value>調べる文字列です</value>
  </data>
  <data name="String_IsNullOrEmpty_Summary" xml:space="preserve">
    <value>文字列がヌルか空文字列かを調べます</value>
  </data>
  <data name="String_IsNullOrEmpty_Value" xml:space="preserve">
    <value>ヌルか空文字かどうかです</value>
  </data>
  <data name="String_LastIndexOf_A" xml:space="preserve">
    <value>文字列全体です</value>
  </data>
  <data name="String_LastIndexOf_B" xml:space="preserve">
    <value>位置を調べる文字列です</value>
  </data>
  <data name="String_LastIndexOf_Remark" xml:space="preserve">
    <value>含まれない場合は-1、含まれる位置は最初の文字の位置を0とした位置なります</value>
  </data>
  <data name="String_LastIndexOf_Summary" xml:space="preserve">
    <value>文字列にある文字列が含まれる最後の位置を取得します</value>
  </data>
  <data name="String_LastIndexOf_Value" xml:space="preserve">
    <value>調べた位置です</value>
  </data>
  <data name="String_Length_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_Length_Summary" xml:space="preserve">
    <value>文字列の長さを取得します</value>
  </data>
  <data name="String_Length_Value" xml:space="preserve">
    <value>取得した長さです</value>
  </data>
  <data name="String_PadLeft_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_PadLeft_Summary" xml:space="preserve">
    <value>指定した幅になるように左から半角スペースで埋めます</value>
  </data>
  <data name="String_PadLeft_TotalWidth" xml:space="preserve">
    <value>対象の幅です</value>
  </data>
  <data name="String_PadLeft_Value" xml:space="preserve">
    <value>埋めた後の文字列です</value>
  </data>
  <data name="String_PadRight_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_PadRight_Summary" xml:space="preserve">
    <value>指定した幅になるように右から半角スペースで埋めます</value>
  </data>
  <data name="String_PadRight_TotalWidth" xml:space="preserve">
    <value>対象の幅です</value>
  </data>
  <data name="String_PadRight_Value" xml:space="preserve">
    <value>埋めた後の文字列です</value>
  </data>
  <data name="String_Remove_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_Remove_Index" xml:space="preserve">
    <value>削除を開始する位置です</value>
  </data>
  <data name="String_Remove_Summary" xml:space="preserve">
    <value>指定した位置以降の文字列を取り除いた文字列を取得します</value>
  </data>
  <data name="String_Remove_Value" xml:space="preserve">
    <value>削除が終わった後の文字列です</value>
  </data>
  <data name="String_Replace_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_Replace_New" xml:space="preserve">
    <value>置き換える文字列です</value>
  </data>
  <data name="String_Replace_Old" xml:space="preserve">
    <value>置き換えられる文字列です</value>
  </data>
  <data name="String_Replace_Summary" xml:space="preserve">
    <value>文字列内の指定した文字列を指定した文字列で置き換えます</value>
  </data>
  <data name="String_Replace_Value" xml:space="preserve">
    <value>置き換えた後の文字列です</value>
  </data>
  <data name="String_StartsWith_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_StartsWith_B" xml:space="preserve">
    <value>始端文字列です</value>
  </data>
  <data name="String_StartsWith_Summary" xml:space="preserve">
    <value>文字列がある文字列で始まるかどうかを取得します</value>
  </data>
  <data name="String_StartsWith_Value" xml:space="preserve">
    <value>始端文字列で始まるかどうかです</value>
  </data>
  <data name="String_Substring_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_Substring_Index" xml:space="preserve">
    <value>開始インデックスです</value>
  </data>
  <data name="String_Substring_Summary" xml:space="preserve">
    <value>文字列の部分文字列を取得します</value>
  </data>
  <data name="String_Substring_Value" xml:space="preserve">
    <value>部分文字列です</value>
  </data>
  <data name="String_ToLower_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_ToLower_Summary" xml:space="preserve">
    <value>文字列の小文字化した文字列を取得します</value>
  </data>
  <data name="String_ToLower_Value" xml:space="preserve">
    <value>小文字化した文字列です</value>
  </data>
  <data name="String_ToUpper_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_ToUpper_Summary" xml:space="preserve">
    <value>文字列の大文字化した文字列を取得します</value>
  </data>
  <data name="String_ToUpper_Value" xml:space="preserve">
    <value>大文字化した文字列です</value>
  </data>
  <data name="String_TrimEnd_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_TrimEnd_Summary" xml:space="preserve">
    <value>文字列の末尾のホワイトスペースを削除した文字列を取得します</value>
  </data>
  <data name="String_TrimEnd_Value" xml:space="preserve">
    <value>末尾のホワイトスペースを削除した文字列です</value>
  </data>
  <data name="String_TrimStart_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_TrimStart_Summary" xml:space="preserve">
    <value>文字列の始端のホワイトスペースを削除した文字列を取得します</value>
  </data>
  <data name="String_TrimStart_Value" xml:space="preserve">
    <value>始端のホワイトスペースを削除した文字列です</value>
  </data>
  <data name="String_Trim_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_Trim_Summary" xml:space="preserve">
    <value>文字列の始端と終端のホワイトスペースを削除した文字列を取得します</value>
  </data>
  <data name="String_Trim_Value" xml:space="preserve">
    <value>始端と終端のホワイトスペースを削除した文字列です</value>
  </data>
  <data name="String_Value_Summary" xml:space="preserve">
    <value>文字列を作成します</value>
  </data>
  <data name="String_Value_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Add_Summary" xml:space="preserve">
    <value>加算します</value>
  </data>
  <data name="Add_Value" xml:space="preserve">
    <value>加算した数値です</value>
  </data>
  <data name="Devide_Summary" xml:space="preserve">
    <value>割算します</value>
  </data>
  <data name="Devide_Value" xml:space="preserve">
    <value>割算した数値です</value>
  </data>
  <data name="Epsilon_Summary" xml:space="preserve">
    <value>取りうる微小値を取得します</value>
  </data>
  <data name="Epsilon_Value" xml:space="preserve">
    <value>取りうる微小値です</value>
  </data>
  <data name="Equal_Summary" xml:space="preserve">
    <value>等しいかどうかを調べます</value>
  </data>
  <data name="Equal_Value" xml:space="preserve">
    <value>等しいかどうかです</value>
  </data>
  <data name="GreaterOrEqual_Summary" xml:space="preserve">
    <value>大きいかあるいは等しいかどうかを調べます</value>
  </data>
  <data name="GreaterOrEqual_Value" xml:space="preserve">
    <value>大きいかあるいは等しいかどうかです</value>
  </data>
  <data name="Greater_Summary" xml:space="preserve">
    <value>大きいかどうかを調べます</value>
  </data>
  <data name="Greater_Value" xml:space="preserve">
    <value>大きいかどうかです</value>
  </data>
  <data name="LessOrEqual_Summary" xml:space="preserve">
    <value>小さいかあるいは等しいかどうかを調べます</value>
  </data>
  <data name="LessOrEqual_Value" xml:space="preserve">
    <value>小さいかあるいは等しいかどうかです</value>
  </data>
  <data name="Less_Summary" xml:space="preserve">
    <value>小さいかどうかを調べます</value>
  </data>
  <data name="Less_Value" xml:space="preserve">
    <value>小さいかどうかです</value>
  </data>
  <data name="Max_Summary" xml:space="preserve">
    <value>取りうる最大値を取得します</value>
  </data>
  <data name="Max_Value" xml:space="preserve">
    <value>取りうる最大値です</value>
  </data>
  <data name="Min_Summary" xml:space="preserve">
    <value>取りうる最小値を取得します</value>
  </data>
  <data name="Min_Value" xml:space="preserve">
    <value>取りうる最小値です</value>
  </data>
  <data name="Multiply_Summary" xml:space="preserve">
    <value>乗算します</value>
  </data>
  <data name="Multiply_Value" xml:space="preserve">
    <value>乗算した結果です</value>
  </data>
  <data name="Parse_A" xml:space="preserve">
    <value>パースする文字列です</value>
  </data>
  <data name="Parse_Fail" xml:space="preserve">
    <value>変換に失敗したときに実行されるイベントです</value>
  </data>
  <data name="Parse_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Parse_Success" xml:space="preserve">
    <value>変換に成功したときに実行されるイベントです</value>
  </data>
  <data name="Parse_Summary" xml:space="preserve">
    <value>文字列をパースして値に変換します</value>
  </data>
  <data name="Parse_Value" xml:space="preserve">
    <value>パースした結果の値です</value>
  </data>
  <data name="Remainder_Summary" xml:space="preserve">
    <value>剰余算をします</value>
  </data>
  <data name="Remainder_Value" xml:space="preserve">
    <value>剰余です</value>
  </data>
  <data name="Substract_Summary" xml:space="preserve">
    <value>減算します</value>
  </data>
  <data name="Substract_Value" xml:space="preserve">
    <value>減算した結果です</value>
  </data>
  <data name="Logic_Sequential_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="IsInfinity_A" xml:space="preserve">
    <value>調べる値です</value>
  </data>
  <data name="IsInfinity_Summary" xml:space="preserve">
    <value>無限大かどうかを調べます</value>
  </data>
  <data name="IsInfinity_Value" xml:space="preserve">
    <value>無限大かどうかです</value>
  </data>
  <data name="IsNan_A" xml:space="preserve">
    <value>調べる値です</value>
  </data>
  <data name="IsNan_Summary" xml:space="preserve">
    <value>Nan(非数値)かどうかを調べます</value>
  </data>
  <data name="IsNan_Value" xml:space="preserve">
    <value>Nan(非数値)かどうかです</value>
  </data>
  <data name="IsNegativeInfinity_A" xml:space="preserve">
    <value>調べる値です</value>
  </data>
  <data name="IsNegativeInfinity_Summary" xml:space="preserve">
    <value>負の無限大かどうかを調べます</value>
  </data>
  <data name="IsNegativeInfinity_Value" xml:space="preserve">
    <value>負の無限大かどうかです</value>
  </data>
  <data name="IsPositiveInfinity_A" xml:space="preserve">
    <value>調べる値です</value>
  </data>
  <data name="IsPositiveInfinity_Summary" xml:space="preserve">
    <value>正の無限大かどうかを調べます</value>
  </data>
  <data name="IsPositiveInfinity_Value" xml:space="preserve">
    <value>正の無限大かどうかです</value>
  </data>
  <data name="Nan_Summary" xml:space="preserve">
    <value>Nan(非数値)を取得します</value>
  </data>
  <data name="Nan_Value" xml:space="preserve">
    <value>Nan(非数値)です</value>
  </data>
  <data name="NegativeInfinity_Summary" xml:space="preserve">
    <value>負の無限大を取得します</value>
  </data>
  <data name="NegativeInfinity_Value" xml:space="preserve">
    <value>負の無限大です</value>
  </data>
  <data name="PositiveInfinity_Summary" xml:space="preserve">
    <value>正の無限大を取得します</value>
  </data>
  <data name="PositiveInfinity_Value" xml:space="preserve">
    <value>正の無限大です</value>
  </data>
  <data name="TemplateClass_Summary" xml:space="preserve">
    <value>クラスのインスタンスを作成します</value>
  </data>
  <data name="TemplateClass_Value" xml:space="preserve">
    <value>クラスの値です</value>
  </data>
  <data name="TemplateStruct_Summary" xml:space="preserve">
    <value>値を作成します</value>
  </data>
  <data name="Scope_HandleEvent_Arg" xml:space="preserve">
    <value>ハンドルした時の引数です</value>
  </data>
  <data name="Scope_HandleEvent_EventName" xml:space="preserve">
    <value>イベント名です</value>
  </data>
  <data name="Scope_HandleEvent_In" xml:space="preserve">
    <value>イベント名にリンクを繋いでいる場合は、このメソッドを呼ぶことでハンドルするイベント名が更新されます</value>
  </data>
  <data name="Scope_HandleEvent_Invoked" xml:space="preserve">
    <value>ハンドルした時に実行されるイベントです</value>
  </data>
  <data name="Scope_HandleEvent_Summary" xml:space="preserve">
    <value>スコープ内のイベントをハンドルします</value>
  </data>
  <data name="Scope_InvokeEvent_Arg" xml:space="preserve">
    <value>実行時の引数です</value>
  </data>
  <data name="Scope_InvokeEvent_EventName" xml:space="preserve">
    <value>実行するイベント名です</value>
  </data>
  <data name="Scope_InvokeEvent_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Scope_InvokeEvent_Summary" xml:space="preserve">
    <value>スコープ内でイベントを実行します</value>
  </data>
  <data name="GlobalScope_GetValue_Remark" xml:space="preserve">
    <value>ValueNameに対応する値が存在しなければエラーが出ます</value>
  </data>
  <data name="GlobalScope_GetValue_Summary" xml:space="preserve">
    <value>ソースが存在するスコープから値を取得します</value>
  </data>
  <data name="GlobalScope_GetValue_Value" xml:space="preserve">
    <value>取得した値です</value>
  </data>
  <data name="GlobalScope_GetValue_ValueName" xml:space="preserve">
    <value>取得する名前です</value>
  </data>
  <data name="GlobalScope_HandleEvent_Arg" xml:space="preserve">
    <value>ハンドルした時の引数です</value>
  </data>
  <data name="GlobalScope_HandleEvent_EventName" xml:space="preserve">
    <value>イベント名です</value>
  </data>
  <data name="GlobalScope_HandleEvent_In" xml:space="preserve">
    <value>イベント名にリンクを繋いでいる場合は、このメソッドを呼ぶことでハンドルするイベント名が更新されます</value>
  </data>
  <data name="GlobalScope_HandleEvent_Invoked" xml:space="preserve">
    <value>ハンドルした時に実行されるイベントです</value>
  </data>
  <data name="GlobalScope_HandleEvent_Summary" xml:space="preserve">
    <value>スコープ内のイベントをハンドルします</value>
  </data>
  <data name="GlobalScope_InvokeEvent_Arg" xml:space="preserve">
    <value>実行時の引数です</value>
  </data>
  <data name="GlobalScope_InvokeEvent_EventName" xml:space="preserve">
    <value>実行するイベント名です</value>
  </data>
  <data name="GlobalScope_InvokeEvent_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="GlobalScope_InvokeEvent_Summary" xml:space="preserve">
    <value>スコープ内でイベントを実行します</value>
  </data>
  <data name="GlobalScope_SetValue_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="GlobalScope_SetValue_Remark" xml:space="preserve">
    <value>すでに指定したValueNameに対応する値がある場合、上書きされます</value>
  </data>
  <data name="GlobalScope_SetValue_Summary" xml:space="preserve">
    <value>ソースが存在するスコープに値を追加、代入します</value>
  </data>
  <data name="GlobalScope_SetValue_Value" xml:space="preserve">
    <value>設定する値です</value>
  </data>
  <data name="GlobalScope_SetValue_ValueName" xml:space="preserve">
    <value>設定する名前です</value>
  </data>
  <data name="Float_Cast_Value" xml:space="preserve">
    <value>Floatの型にキャストを行った値です</value>
  </data>
  <data name="Int32_Cast_Value" xml:space="preserve">
    <value>Int32の型にキャストを行った値です</value>
  </data>
  <data name="TemplateCast_CastValue" xml:space="preserve">
    <value>キャストを行う値です</value>
  </data>
  <data name="TemplateCast_Summary" xml:space="preserve">
    <value>特定の型にキャストを行います</value>
  </data>
  <data name="Logic_IfTernary_A" xml:space="preserve">
    <value>Conditionが真の場合に評価される値です</value>
  </data>
  <data name="Logic_IfTernary_B" xml:space="preserve">
    <value>Conditionが偽の場合に評価される値です</value>
  </data>
  <data name="Logic_IfTernary_Condition" xml:space="preserve">
    <value>条件の引数です</value>
  </data>
  <data name="Logic_IfTernary_Summary" xml:space="preserve">
    <value>Conditionが真の場合、Aを評価し、偽の場合Bを評価しValueとして返します</value>
  </data>
  <data name="Logic_IfTernary_Value" xml:space="preserve">
    <value>Conditionによって評価された値です</value>
  </data>
  <data name="Execute_Failed" xml:space="preserve">
    <value>失敗したときに呼ばれるイベントです</value>
  </data>
  <data name="Execute_In" xml:space="preserve">
    <value>実行します</value>
  </data>
  <data name="Execute_Success" xml:space="preserve">
    <value>成功したときに呼ばれるイベントです</value>
  </data>
  <data name="FirstArgument" xml:space="preserve">
    <value>一つ目の引数です</value>
  </data>
  <data name="SecondArgument" xml:space="preserve">
    <value>二つ目の引数です</value>
  </data>
  <data name="Stream_Length_Stream" xml:space="preserve">
    <value>対象のストリームを設定します</value>
  </data>
  <data name="Stream_Length_Summary" xml:space="preserve">
    <value>ストリームの長さを取得します</value>
  </data>
  <data name="Stream_Length_Value" xml:space="preserve">
    <value>ストリームの長さです</value>
  </data>
  <data name="Stream_Position_Stream" xml:space="preserve">
    <value>対象のストリームを設定します</value>
  </data>
  <data name="Stream_Position_Summary" xml:space="preserve">
    <value>ストリームの位置を取得します</value>
  </data>
  <data name="Stream_Position_Value" xml:space="preserve">
    <value>ストリームの位置です</value>
  </data>
  <data name="Stream_ReadAllLines_Encoding" xml:space="preserve">
    <value>読み取る際のエンコードを設定します</value>
  </data>
  <data name="Stream_ReadAllLines_Summary" xml:space="preserve">
    <value>ストリームのすべてのラインを読み取ります</value>
  </data>
  <data name="Stream_ReadAllLines_Value" xml:space="preserve">
    <value>すべてのラインです</value>
  </data>
  <data name="Stream_ReadByte_Summary" xml:space="preserve">
    <value>ストリームから１バイト読み取ります</value>
  </data>
  <data name="Stream_ReadByte_Value" xml:space="preserve">
    <value>読み取った値です</value>
  </data>
  <data name="Stream_ReadDouble_Summary" xml:space="preserve">
    <value>ストリームから８バイト読み取り、倍精度浮動小数点数を取得します</value>
  </data>
  <data name="Stream_ReadDouble_Value" xml:space="preserve">
    <value>読み取った値です</value>
  </data>
  <data name="Stream_ReadFloat_Summary" xml:space="preserve">
    <value>ストリームから４バイト読み取り、単精度浮動小数点数を取得します</value>
  </data>
  <data name="Stream_ReadFloat_Value" xml:space="preserve">
    <value>読み取った値です</value>
  </data>
  <data name="Stream_ReadInt16_Summary" xml:space="preserve">
    <value>ストリームから２バイト読み取り、符号付き整数を取得します</value>
  </data>
  <data name="Stream_ReadInt16_Value" xml:space="preserve">
    <value>読み取った値です</value>
  </data>
  <data name="Stream_ReadInt32_Summary" xml:space="preserve">
    <value>ストリームから４バイト読み取り、符号付き整数を取得します</value>
  </data>
  <data name="Stream_ReadInt32_Value" xml:space="preserve">
    <value>読み取った値です</value>
  </data>
  <data name="Stream_ReadUInt16_Summary" xml:space="preserve">
    <value>ストリームから２バイト読み取り、符号なし整数を取得します</value>
  </data>
  <data name="Stream_ReadUInt16_Value" xml:space="preserve">
    <value>読み取った値です</value>
  </data>
  <data name="Stream_Seek_Offset" xml:space="preserve">
    <value>シークの基準地からのオフセットを設定します</value>
  </data>
  <data name="Stream_Seek_SeekOrigin" xml:space="preserve">
    <value>シークの基準地を設定します</value>
  </data>
  <data name="Stream_Seek_Summary" xml:space="preserve">
    <value>ストリームの位置を変更します</value>
  </data>
  <data name="Stream_Stream" xml:space="preserve">
    <value>対象のストリームを設定します</value>
  </data>
  <data name="Random_NextDouble_Summary" xml:space="preserve">
    <value>0以上1以下の浮動小数点数乱数を取得します</value>
  </data>
  <data name="Random_NextDouble_Value" xml:space="preserve">
    <value>乱数です</value>
  </data>
  <data name="Random_Next_Max" xml:space="preserve">
    <value>乱数の最大値を設定します（ただし、含まない）</value>
  </data>
  <data name="Random_Next_Min" xml:space="preserve">
    <value>乱数の最小値を設定します</value>
  </data>
  <data name="Random_Next_Summary" xml:space="preserve">
    <value>Min以上Max未満の整数乱数を取得します</value>
  </data>
  <data name="Random_Next_Value" xml:space="preserve">
    <value>乱数です</value>
  </data>
  <data name="Random_Trigger_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="Random_Trigger_Out0" xml:space="preserve">
    <value>一つ目のイベントです</value>
  </data>
  <data name="Random_Trigger_Out1" xml:space="preserve">
    <value>二つ目のイベントです</value>
  </data>
  <data name="Random_Trigger_Out2" xml:space="preserve">
    <value>三つ目のイベントです</value>
  </data>
  <data name="Random_Trigger_Out3" xml:space="preserve">
    <value>四つ目のイベントです</value>
  </data>
  <data name="Random_Trigger_Out4" xml:space="preserve">
    <value>五つ目のイベントです</value>
  </data>
  <data name="Random_Trigger_Out5" xml:space="preserve">
    <value>六つ目のイベントです</value>
  </data>
  <data name="Random_Trigger_Out6" xml:space="preserve">
    <value>七つ目のイベントです</value>
  </data>
  <data name="Random_Trigger_Summary" xml:space="preserve">
    <value>一つのイベントをランダムに使います</value>
  </data>
  <data name="String_Format_A" xml:space="preserve">
    <value>書式を含む文字列を指定します</value>
  </data>
  <data name="String_Format_Args" xml:space="preserve">
    <value>書式のインデックスにあうデータリストを指定します</value>
  </data>
  <data name="String_Format_Summary" xml:space="preserve">
    <value>文字列書式を指定して文字列を生成します</value>
  </data>
  <data name="String_Format_Value" xml:space="preserve">
    <value>書式を指定した文字列を取得します</value>
  </data>
  <data name="TemplateIsType_Summary" xml:space="preserve">
    <value>ターゲットのタイプを調べます</value>
  </data>
  <data name="TemplateIsType_Target" xml:space="preserve">
    <value>ターゲットです</value>
  </data>
  <data name="TemplateIsType_Value" xml:space="preserve">
    <value>ターゲットがタイプであったかどうかです</value>
  </data>
  <data name="Object_Null_Remark" xml:space="preserve">
    <value>ヌル値とは参照型の既定値を指します</value>
  </data>
  <data name="Object_Null_Summary" xml:space="preserve">
    <value>ヌル値を取得します</value>
  </data>
  <data name="Object_Null_Value" xml:space="preserve">
    <value>ヌル値です</value>
  </data>
  <data name="GlobalScope_HandleEvent_Handled" xml:space="preserve">
    <value>ハンドルし、インボークチェインを中止するかどうかです</value>
  </data>
  <data name="Scope_HandleEvent_Handled" xml:space="preserve">
    <value>ハンドルし、インボークチェインを中止するかどうかです</value>
  </data>
  <data name="GlobalScope_PreviewHandleEvent_In" xml:space="preserve">
    <value>イベント名にリンクを繋いでいる場合は、このメソッドを呼ぶことでハンドルするイベント名が更新されます</value>
  </data>
  <data name="GlobalScope_PreviewHandleEvent_Arg" xml:space="preserve">
    <value>ハンドルした時の引数です</value>
  </data>
  <data name="GlobalScope_PreviewHandleEvent_EventName" xml:space="preserve">
    <value>イベント名です</value>
  </data>
  <data name="GlobalScope_PreviewHandleEvent_Handled" xml:space="preserve">
    <value>ハンドルし、インボークチェインを中止するかどうかです</value>
  </data>
  <data name="GlobalScope_PreviewHandleEvent_Invoked" xml:space="preserve">
    <value>ハンドルした時に実行されるイベントです</value>
  </data>
  <data name="GlobalScope_PreviewHandleEvent_Summary" xml:space="preserve">
    <value>スコープ内のイベントをハンドルします</value>
  </data>
  <data name="Scope_PreviewHandleEvent_Arg" xml:space="preserve">
    <value>ハンドルした時の引数です</value>
  </data>
  <data name="Scope_PreviewHandleEvent_EventName" xml:space="preserve">
    <value>イベント名です</value>
  </data>
  <data name="Scope_PreviewHandleEvent_Handled" xml:space="preserve">
    <value>ハンドルし、インボークチェインを中止するかどうかです</value>
  </data>
  <data name="Scope_PreviewHandleEvent_In" xml:space="preserve">
    <value>イベント名にリンクを繋いでいる場合は、このメソッドを呼ぶことでハンドルするイベント名が更新されます</value>
  </data>
  <data name="Scope_PreviewHandleEvent_Invoked" xml:space="preserve">
    <value>ハンドルした時に実行されるイベントです</value>
  </data>
  <data name="Scope_PreviewHandleEvent_Summary" xml:space="preserve">
    <value>スコープ内のイベントをハンドルします</value>
  </data>
  <data name="ArrayList_FromElement_A" xml:space="preserve">
    <value>１つ目の要素です</value>
  </data>
  <data name="ArrayList_FromElement_B" xml:space="preserve">
    <value>２つ目の要素です</value>
  </data>
  <data name="ArrayList_FromElement_C" xml:space="preserve">
    <value>３つ目の要素です</value>
  </data>
  <data name="ArrayList_FromElement_D" xml:space="preserve">
    <value>４つ目の要素です</value>
  </data>
  <data name="ArrayList_FromElement_E" xml:space="preserve">
    <value>５つ目の要素です</value>
  </data>
  <data name="ArrayList_FromElement_F" xml:space="preserve">
    <value>６つ目の要素です</value>
  </data>
  <data name="ArrayList_FromElement_IsExpanded" xml:space="preserve">
    <value>追加する要素がArrayListの場合に展開して子要素を追加するかどうかです</value>
  </data>
  <data name="ArrayList_FromElement_Summary" xml:space="preserve">
    <value>要素からArrayListを作成します</value>
  </data>
  <data name="ArrayList_FromElement_Value" xml:space="preserve">
    <value>ArrayListのインスタンスです</value>
  </data>
  <data name="String_At_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_At_Index" xml:space="preserve">
    <value>対象のインデックスです</value>
  </data>
  <data name="String_At_Summary" xml:space="preserve">
    <value>文字列の1文字を取得します</value>
  </data>
  <data name="String_At_Value" xml:space="preserve">
    <value>取得された文字列です</value>
  </data>
  <data name="Stopwatch_Elapsed_ExactSeconds" xml:space="preserve">
    <value>経過時間を正確な秒単位で取得します</value>
  </data>
  <data name="Stopwatch_Elapsed_Milliseconds" xml:space="preserve">
    <value>経過時間をミリ秒単位で取得します</value>
  </data>
  <data name="Stopwatch_Elapsed_Summary" xml:space="preserve">
    <value>ストップウォッチの経過を取得します</value>
  </data>
  <data name="Stopwatch_Reset_Summary" xml:space="preserve">
    <value>ストップウォッチをリセットします</value>
  </data>
  <data name="Stopwatch_Start_Value" xml:space="preserve">
    <value>ストップウォッチを開始します</value>
  </data>
  <data name="Stopwatch_Stopwatch" xml:space="preserve">
    <value>ストップウォッチです</value>
  </data>
  <data name="Stopwatch_Stop_Summary" xml:space="preserve">
    <value>ストップウォッチを停止します</value>
  </data>
  <data name="Stopwatch_Value_Summary" xml:space="preserve">
    <value>ストップウォッチを作成します</value>
  </data>
  <data name="Repeat_Break_Summary" xml:space="preserve">
    <value>リピートを中断し、リピートそのものを中止します</value>
  </data>
  <data name="Repeat_Continue_Summary" xml:space="preserve">
    <value>リピートを中断し、リピート処理を最初から行います</value>
  </data>
  <data name="ArrayList_IndexOf_Count" xml:space="preserve">
    <value>調べる数です</value>
  </data>
  <data name="ArrayList_IndexOf_StartIndex" xml:space="preserve">
    <value>調べる開始インデックスです</value>
  </data>
  <data name="ArrayList_LastIndexOf_Count" xml:space="preserve">
    <value>調べる数です</value>
  </data>
  <data name="ArrayList_LastIndexOf_StartIndex" xml:space="preserve">
    <value>調べる開始インデックスです</value>
  </data>
  <data name="String_IndexOf_Count" xml:space="preserve">
    <value>調べる数です</value>
  </data>
  <data name="String_IndexOf_StartIndex" xml:space="preserve">
    <value>調べる開始インデックスです</value>
  </data>
  <data name="String_LastIndexOf_Count" xml:space="preserve">
    <value>調べる数です</value>
  </data>
  <data name="String_LastIndexOf_StartIndex" xml:space="preserve">
    <value>調べる開始インデックスです</value>
  </data>
  <data name="String_Remove_Count" xml:space="preserve">
    <value>削除する数です</value>
  </data>
  <data name="String_Empty_Summary" xml:space="preserve">
    <value>空の文字列です</value>
  </data>
  <data name="String_Empty_Value" xml:space="preserve">
    <value>空の文字列を取得します</value>
  </data>
  <data name="Hashtable_FromPair_A" xml:space="preserve">
    <value>一つ目のペアを設定します</value>
  </data>
  <data name="Hashtable_FromPair_B" xml:space="preserve">
    <value>二つ目のペアを設定します</value>
  </data>
  <data name="Hashtable_FromPair_C" xml:space="preserve">
    <value>三つ目のペアを設定します</value>
  </data>
  <data name="Hashtable_FromPair_D" xml:space="preserve">
    <value>四つ目のペアを設定します</value>
  </data>
  <data name="Hashtable_FromPair_E" xml:space="preserve">
    <value>五つ目のペアを設定します</value>
  </data>
  <data name="Hashtable_FromPair_F" xml:space="preserve">
    <value>六つ目のペアを設定します</value>
  </data>
  <data name="Hashtable_FromPair_IsExpanded" xml:space="preserve">
    <value>ペアの値がHashtableの場合にペアを展開して追加するかどうかを設定します</value>
  </data>
  <data name="Hashtable_FromPair_Summary" xml:space="preserve">
    <value>ペアからHashtableを作成します</value>
  </data>
  <data name="Hashtable_FromPair_Value" xml:space="preserve">
    <value>Hashtableです</value>
  </data>
  <data name="Hashtable_Pairs_Pairs" xml:space="preserve">
    <value>ペアです</value>
  </data>
  <data name="Hashtable_Pairs_Remark" xml:space="preserve">
    <value>ペアの入ったArrayListを取得します</value>
  </data>
  <data name="Hashtable_Pairs_Summary" xml:space="preserve">
    <value>ペアの一覧を取得します</value>
  </data>
  <data name="ContextScope_GetValue_Summary" xml:space="preserve">
    <value>ソースが存在するスコープから値を取得します</value>
  </data>
  <data name="ContextScope_GetValue_Value" xml:space="preserve">
    <value>取得した値です</value>
  </data>
  <data name="ContextScope_GetValue_ValueName" xml:space="preserve">
    <value>取得する名前です</value>
  </data>
  <data name="ContextScope_HandleEvent_Arg" xml:space="preserve">
    <value>ハンドルした時の引数です</value>
  </data>
  <data name="ContextScope_HandleEvent_EventName" xml:space="preserve">
    <value>イベント名です</value>
  </data>
  <data name="ContextScope_HandleEvent_Handled" xml:space="preserve">
    <value>ハンドルし、インボークチェインを中止するかどうかです</value>
  </data>
  <data name="ContextScope_HandleEvent_In" xml:space="preserve">
    <value>イベント名にリンクを繋いでいる場合は、このメソッドを呼ぶことでハンドルするイベント名が更新されます</value>
  </data>
  <data name="ContextScope_HandleEvent_Invoked" xml:space="preserve">
    <value>ハンドルした時に実行されるイベントです</value>
  </data>
  <data name="ContextScope_HandleEvent_Summary" xml:space="preserve">
    <value>スコープ内のイベントをハンドルします</value>
  </data>
  <data name="ContextScope_InvokeEvent_Arg" xml:space="preserve">
    <value>実行時の引数です</value>
  </data>
  <data name="ContextScope_InvokeEvent_EventName" xml:space="preserve">
    <value>実行するイベント名です</value>
  </data>
  <data name="ContextScope_InvokeEvent_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="ContextScope_InvokeEvent_Summary" xml:space="preserve">
    <value>スコープ内でイベントを実行します</value>
  </data>
  <data name="ContextScope_PreviewHandleEvent_Arg" xml:space="preserve">
    <value>ハンドルした時の引数です</value>
  </data>
  <data name="ContextScope_PreviewHandleEvent_EventName" xml:space="preserve">
    <value>イベント名です</value>
  </data>
  <data name="ContextScope_PreviewHandleEvent_Handled" xml:space="preserve">
    <value>ハンドルし、インボークチェインを中止するかどうかです</value>
  </data>
  <data name="ContextScope_PreviewHandleEvent_In" xml:space="preserve">
    <value>イベント名にリンクを繋いでいる場合は、このメソッドを呼ぶことでハンドルするイベント名が更新されます</value>
  </data>
  <data name="ContextScope_PreviewHandleEvent_Invoked" xml:space="preserve">
    <value>ハンドルした時に実行されるイベントです</value>
  </data>
  <data name="ContextScope_PreviewHandleEvent_Summary" xml:space="preserve">
    <value>スコープ内のイベントをハンドルします</value>
  </data>
  <data name="ContextScope_SetValue_In" xml:space="preserve">
    <value>入力メソッドです</value>
  </data>
  <data name="ContextScope_SetValue_Summary" xml:space="preserve">
    <value>ソースが存在するスコープに値を追加、代入します</value>
  </data>
  <data name="ContextScope_SetValue_Value" xml:space="preserve">
    <value>設定する値です</value>
  </data>
  <data name="ContextScope_SetValue_ValueName" xml:space="preserve">
    <value>設定する名前です</value>
  </data>
  <data name="ContextScope_IsDefined_Summary" xml:space="preserve">
    <value>ノードが存在するスコープに値が存在するかどうかを取得します</value>
  </data>
  <data name="ContextScope_IsDefined_Value" xml:space="preserve">
    <value>値が存在するかどうかです</value>
  </data>
  <data name="ContextScope_IsDefined_ValueName" xml:space="preserve">
    <value>取得する名前です</value>
  </data>
  <data name="GlobalScope_IsDefined_Summary" xml:space="preserve">
    <value>ノードが存在するスコープに値が存在するかどうかを取得します</value>
  </data>
  <data name="GlobalScope_IsDefined_Value" xml:space="preserve">
    <value>値が存在するかどうかです</value>
  </data>
  <data name="GlobalScope_IsDefined_ValueName" xml:space="preserve">
    <value>取得する名前です</value>
  </data>
  <data name="Scope_IsDefined_Summary" xml:space="preserve">
    <value>ノードが存在するスコープに値が存在するかどうかを取得します</value>
  </data>
  <data name="Scope_IsDefined_Value" xml:space="preserve">
    <value>値が存在するかどうかです</value>
  </data>
  <data name="Scope_IsDefined_ValueName" xml:space="preserve">
    <value>取得する名前です</value>
  </data>
  <data name="HashSet_Add_IsNew" xml:space="preserve">
    <value>追加した要素が新しいかどうかを取得します</value>
  </data>
  <data name="HashSet_Add_Item" xml:space="preserve">
    <value>追加する要素です</value>
  </data>
  <data name="HashSet_Add_Summary" xml:space="preserve">
    <value>セットに要素を追加します</value>
  </data>
  <data name="HashSet_Clear_Summary" xml:space="preserve">
    <value>セットの内容をクリアします</value>
  </data>
  <data name="HashSet_Contains_Item" xml:space="preserve">
    <value>対象の要素です</value>
  </data>
  <data name="HashSet_Contains_Result" xml:space="preserve">
    <value>含むかどうかです</value>
  </data>
  <data name="HashSet_Contains_Summary" xml:space="preserve">
    <value>指定した要素をセットに含むかどうかを調べます</value>
  </data>
  <data name="HashSet_ExceptWith_List" xml:space="preserve">
    <value>対象のリストです</value>
  </data>
  <data name="HashSet_ExceptWith_Summary" xml:space="preserve">
    <value>指定したリストの要素をセットから取り除きます</value>
  </data>
  <data name="HashSet_HashSet" xml:space="preserve">
    <value>メソッドの対象となるHashSetです</value>
  </data>
  <data name="HashSet_IntersectWith_List" xml:space="preserve">
    <value>対象のリストです</value>
  </data>
  <data name="HashSet_IntersectWith_Summary" xml:space="preserve">
    <value>指定したリストとの積集合をとります</value>
  </data>
  <data name="HashSet_IsProperSubsetOf_List" xml:space="preserve">
    <value>対象のリストです</value>
  </data>
  <data name="HashSet_IsProperSubsetOf_Result" xml:space="preserve">
    <value>真のサブセットかどうかです</value>
  </data>
  <data name="HashSet_IsProperSubsetOf_Summary" xml:space="preserve">
    <value>指定したリストの真のサブセットかどうかを調べます</value>
  </data>
  <data name="HashSet_IsProperSupersetOf_List" xml:space="preserve">
    <value>対象のリストです</value>
  </data>
  <data name="HashSet_IsProperSupersetOf_Result" xml:space="preserve">
    <value>真のスーパーセットかどうかです</value>
  </data>
  <data name="HashSet_IsProperSupersetOf_Summary" xml:space="preserve">
    <value>指定したリストの真のスーパーセットかどうかを調べます</value>
  </data>
  <data name="HashSet_IsSubsetOf_List" xml:space="preserve">
    <value>対象のリストです</value>
  </data>
  <data name="HashSet_IsSubsetOf_Result" xml:space="preserve">
    <value>サブセットかどうかです</value>
  </data>
  <data name="HashSet_IsSubsetOf_Summary" xml:space="preserve">
    <value>指定したリストのサブセットかどうかを調べます</value>
  </data>
  <data name="HashSet_IsSupersetOf_List" xml:space="preserve">
    <value>対象のリストです</value>
  </data>
  <data name="HashSet_IsSupersetOf_Result" xml:space="preserve">
    <value>スーパーセットかどうかです</value>
  </data>
  <data name="HashSet_IsSupersetOf_Summary" xml:space="preserve">
    <value>指定したリストのスーパーセットかどうかを調べます</value>
  </data>
  <data name="HashSet_Overlaps_List" xml:space="preserve">
    <value>対象のリストです</value>
  </data>
  <data name="HashSet_Overlaps_Result" xml:space="preserve">
    <value>共通する要素を持つかどうかです</value>
  </data>
  <data name="HashSet_Overlaps_Summary" xml:space="preserve">
    <value>指定したリストとセットで共通する要素を持つかどうかを調べます</value>
  </data>
  <data name="HashSet_Remove_Item" xml:space="preserve">
    <value>削除する要素です</value>
  </data>
  <data name="HashSet_Remove_Removed" xml:space="preserve">
    <value>削除する要素が含まれていたかどうかです</value>
  </data>
  <data name="HashSet_Remove_Summary" xml:space="preserve">
    <value>セットから要素を削除します</value>
  </data>
  <data name="HashSet_SetEquals_List" xml:space="preserve">
    <value>対象のリストです</value>
  </data>
  <data name="HashSet_SetEquals_Result" xml:space="preserve">
    <value>セットが同じ内容かどうかです</value>
  </data>
  <data name="HashSet_SetEquals_Summary" xml:space="preserve">
    <value>指定したリストとセットが同じ内容かどうかを調べます</value>
  </data>
  <data name="HashSet_SymmetricExceptWith_List" xml:space="preserve">
    <value>対象のリストです</value>
  </data>
  <data name="HashSet_SymmetricExceptWith_Summary" xml:space="preserve">
    <value>指定したリストかどちらか一方に存在する要素だけにします</value>
  </data>
  <data name="HashSet_UnionWith_List" xml:space="preserve">
    <value>対象のリストです</value>
  </data>
  <data name="HashSet_UnionWith_Summary" xml:space="preserve">
    <value>指定したリストとの和集合を取ります</value>
  </data>
  <data name="HashSet_FromElement_A" xml:space="preserve">
    <value>１つ目の要素です</value>
  </data>
  <data name="HashSet_FromElement_B" xml:space="preserve">
    <value>２つ目の要素です</value>
  </data>
  <data name="HashSet_FromElement_C" xml:space="preserve">
    <value>３つ目の要素です</value>
  </data>
  <data name="HashSet_FromElement_D" xml:space="preserve">
    <value>４つ目の要素です</value>
  </data>
  <data name="HashSet_FromElement_E" xml:space="preserve">
    <value>５つ目の要素です</value>
  </data>
  <data name="HashSet_FromElement_F" xml:space="preserve">
    <value>６つ目の要素です</value>
  </data>
  <data name="HashSet_FromElement_IsExpanded" xml:space="preserve">
    <value>追加する要素がHashSetの場合に展開して子要素を追加するかどうかです</value>
  </data>
  <data name="HashSet_FromElement_Summary" xml:space="preserve">
    <value>要素からHashSetを作成します</value>
  </data>
  <data name="HashSet_FromElement_Value" xml:space="preserve">
    <value>HashSetのインスタンスです</value>
  </data>
  <data name="ArrayList_SetAt_Index" xml:space="preserve">
    <value>インデックスです</value>
  </data>
  <data name="ArrayList_SetAt_Summary" xml:space="preserve">
    <value>特定のインデックスの要素を変更します</value>
  </data>
  <data name="ArrayList_SetAt_Value" xml:space="preserve">
    <value>新しい要素です</value>
  </data>
  <data name="Array_Array" xml:space="preserve">
    <value>対象の配列です</value>
  </data>
  <data name="Array_At_Array" xml:space="preserve">
    <value>対象の配列です</value>
  </data>
  <data name="Array_At_Index" xml:space="preserve">
    <value>インデックスです</value>
  </data>
  <data name="Array_At_Summary" xml:space="preserve">
    <value>配列の特定のインデックスの要素を取得します</value>
  </data>
  <data name="Array_At_Value" xml:space="preserve">
    <value>取得した値です</value>
  </data>
  <data name="Array_Clear_Index" xml:space="preserve">
    <value>クリアする最初のインデックスです</value>
  </data>
  <data name="Array_Clear_Length" xml:space="preserve">
    <value>クリアする個数です</value>
  </data>
  <data name="Array_Clear_Summary" xml:space="preserve">
    <value>配列を既定の要素でクリアします</value>
  </data>
  <data name="Array_ConstrainedCopy_DestinationArray" xml:space="preserve">
    <value>コピー先の配列です</value>
  </data>
  <data name="Array_ConstrainedCopy_DestinationIndex" xml:space="preserve">
    <value>コピー先の配列のコピー開始インデックスです</value>
  </data>
  <data name="Array_ConstrainedCopy_Length" xml:space="preserve">
    <value>コピーする個数です</value>
  </data>
  <data name="Array_ConstrainedCopy_SourceIndex" xml:space="preserve">
    <value>コピー元の配列のコピー開始インデックスです</value>
  </data>
  <data name="Array_ConstrainedCopy_Summary" xml:space="preserve">
    <value>配列をコピーします。コピーが完了するまで内容は更新されません。</value>
  </data>
  <data name="Array_Copy_DestinationArray" xml:space="preserve">
    <value>コピー先の配列です</value>
  </data>
  <data name="Array_Copy_DestinationIndex" xml:space="preserve">
    <value>コピー先の配列のコピー開始インデックスです</value>
  </data>
  <data name="Array_Copy_Length" xml:space="preserve">
    <value>コピーする個数です</value>
  </data>
  <data name="Array_Copy_SourceIndex" xml:space="preserve">
    <value>コピー元の配列のコピー開始インデックスです</value>
  </data>
  <data name="Array_Copy_Summary" xml:space="preserve">
    <value>配列をコピーします</value>
  </data>
  <data name="Array_IndexOf_Count" xml:space="preserve">
    <value>検索を行う個数です</value>
  </data>
  <data name="Array_IndexOf_Index" xml:space="preserve">
    <value>インデックスです</value>
  </data>
  <data name="Array_IndexOf_StartIndex" xml:space="preserve">
    <value>検索を開始するインデックスです</value>
  </data>
  <data name="Array_IndexOf_Summary" xml:space="preserve">
    <value>特定の要素が配列のどのインデックスにあるか前方から検索します</value>
  </data>
  <data name="Array_IndexOf_Value" xml:space="preserve">
    <value>調べる要素です</value>
  </data>
  <data name="Array_LastIndexOf_Count" xml:space="preserve">
    <value>検索を行う個数です</value>
  </data>
  <data name="Array_LastIndexOf_Index" xml:space="preserve">
    <value>インデックスです</value>
  </data>
  <data name="Array_LastIndexOf_StartIndex" xml:space="preserve">
    <value>検索を開始するインデックスです</value>
  </data>
  <data name="Array_LastIndexOf_Summary" xml:space="preserve">
    <value>特定の要素が配列のどのインデックスにあるか後方から検索します</value>
  </data>
  <data name="Array_LastIndexOf_Value" xml:space="preserve">
    <value>調べる要素です</value>
  </data>
  <data name="Array_Length_Array" xml:space="preserve">
    <value>対象の配列です</value>
  </data>
  <data name="Array_Length_Summary" xml:space="preserve">
    <value>配列の長さを取得します</value>
  </data>
  <data name="Array_Length_Value" xml:space="preserve">
    <value>長さです</value>
  </data>
  <data name="Array_Reverse_Index" xml:space="preserve">
    <value>リバースを開始するインデックスです</value>
  </data>
  <data name="Array_Reverse_Length" xml:space="preserve">
    <value>リバースを行う個数です</value>
  </data>
  <data name="Array_Reverse_Summary" xml:space="preserve">
    <value>配列の中身をリバースします</value>
  </data>
  <data name="Array_SetAt_Index" xml:space="preserve">
    <value>対象のインデックスです</value>
  </data>
  <data name="Array_SetAt_Summary" xml:space="preserve">
    <value>配列の特定のインデックスの要素を変更します</value>
  </data>
  <data name="Array_SetAt_Value" xml:space="preserve">
    <value>新しい要素です</value>
  </data>
  <data name="Array_Value_In" xml:space="preserve">
    <value>作成します</value>
  </data>
  <data name="Array_Value_Length" xml:space="preserve">
    <value>配列の長さです</value>
  </data>
  <data name="Array_Value_Summary" xml:space="preserve">
    <value>固定長の配列を作成します</value>
  </data>
  <data name="Array_Value_Value" xml:space="preserve">
    <value>作成した配列です</value>
  </data>
  <data name="Array_BinarySearch_Compare" xml:space="preserve">
    <value>比較時のイベントです</value>
  </data>
  <data name="Array_BinarySearch_FoundIndex" xml:space="preserve">
    <value>見つかったインデックスです</value>
  </data>
  <data name="Array_BinarySearch_Length" xml:space="preserve">
    <value>検索する個数です</value>
  </data>
  <data name="Array_BinarySearch_Result" xml:space="preserve">
    <value>比較の結果です</value>
  </data>
  <data name="Array_BinarySearch_StartIndex" xml:space="preserve">
    <value>検索を開始するインデックスです</value>
  </data>
  <data name="Array_BinarySearch_Summary" xml:space="preserve">
    <value>ソート済み配列に対して２分探索を行います</value>
  </data>
  <data name="Array_BinarySearch_Value" xml:space="preserve">
    <value>検索する値です</value>
  </data>
  <data name="Array_BinarySearch_X" xml:space="preserve">
    <value>比較関数の１つ目の引数です</value>
  </data>
  <data name="Array_BinarySearch_Y" xml:space="preserve">
    <value>比較関数の２つ目の引数です</value>
  </data>
  <data name="Array_FindIndex_Count" xml:space="preserve">
    <value>検索する個数です</value>
  </data>
  <data name="Array_FindIndex_FoundIndex" xml:space="preserve">
    <value>見つかったインデックスです</value>
  </data>
  <data name="Array_FindIndex_Predicate" xml:space="preserve">
    <value>比較するときのイベントです</value>
  </data>
  <data name="Array_FindIndex_Result" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="Array_FindIndex_StartIndex" xml:space="preserve">
    <value>検索を開始するインデックスです</value>
  </data>
  <data name="Array_FindIndex_Summary" xml:space="preserve">
    <value>指定した要素が最初に現れるインデックスを見つけます</value>
  </data>
  <data name="Array_FindIndex_Value" xml:space="preserve">
    <value>比較する値です</value>
  </data>
  <data name="Array_FindLastIndex_Count" xml:space="preserve">
    <value>検索する個数です</value>
  </data>
  <data name="Array_FindLastIndex_FoundIndex" xml:space="preserve">
    <value>見つかったインデックスです</value>
  </data>
  <data name="Array_FindLastIndex_Predicate" xml:space="preserve">
    <value>比較するときのイベントです</value>
  </data>
  <data name="Array_FindLastIndex_Result" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="Array_FindLastIndex_StartIndex" xml:space="preserve">
    <value>検索を開始するインデックスです</value>
  </data>
  <data name="Array_FindLastIndex_Summary" xml:space="preserve">
    <value>指定した要素が最後に現れるインデックスを見つけます</value>
  </data>
  <data name="Array_FindLastIndex_Value" xml:space="preserve">
    <value>比較する値です</value>
  </data>
  <data name="Array_FromElement_A" xml:space="preserve">
    <value>１つ目の要素です</value>
  </data>
  <data name="Array_FromElement_B" xml:space="preserve">
    <value>２つ目の要素です</value>
  </data>
  <data name="Array_FromElement_C" xml:space="preserve">
    <value>３つ目の要素です</value>
  </data>
  <data name="Array_FromElement_D" xml:space="preserve">
    <value>４つ目の要素です</value>
  </data>
  <data name="Array_FromElement_E" xml:space="preserve">
    <value>５つ目の要素です</value>
  </data>
  <data name="Array_FromElement_F" xml:space="preserve">
    <value>６つ目の要素です</value>
  </data>
  <data name="Array_FromElement_IsExpanded" xml:space="preserve">
    <value>追加する要素が配列の場合に展開してから作成するかどうかです</value>
  </data>
  <data name="Array_FromElement_Summary" xml:space="preserve">
    <value>要素から配列を作成します</value>
  </data>
  <data name="Array_FromElement_Value" xml:space="preserve">
    <value>作成した配列です</value>
  </data>
  <data name="Array_SortWithItem_Items" xml:space="preserve">
    <value>値を持つ配列です</value>
  </data>
  <data name="Array_SortWithItem_Summary" xml:space="preserve">
    <value>値を持つ配列を同時にソートします</value>
  </data>
  <data name="Array_Sort_Compare" xml:space="preserve">
    <value>比較するときのイベントです</value>
  </data>
  <data name="Array_Sort_Length" xml:space="preserve">
    <value>比較する個数です</value>
  </data>
  <data name="Array_Sort_Result" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="Array_Sort_StartIndex" xml:space="preserve">
    <value>比較を開始するインデックスです</value>
  </data>
  <data name="Array_Sort_Summary" xml:space="preserve">
    <value>配列をソートします</value>
  </data>
  <data name="Array_Sort_X" xml:space="preserve">
    <value>比較関数の１つ目の引数です</value>
  </data>
  <data name="Array_Sort_Y" xml:space="preserve">
    <value>比較関数の２つ目の引数です</value>
  </data>
  <data name="ArrayList_BinarySearch_Compare" xml:space="preserve">
    <value>比較時のイベントです</value>
  </data>
  <data name="ArrayList_BinarySearch_Count" xml:space="preserve">
    <value>検索する個数です</value>
  </data>
  <data name="ArrayList_BinarySearch_FoundIndex" xml:space="preserve">
    <value>見つかったインデックスです</value>
  </data>
  <data name="ArrayList_BinarySearch_Result" xml:space="preserve">
    <value>比較の結果です</value>
  </data>
  <data name="ArrayList_BinarySearch_StartIndex" xml:space="preserve">
    <value>検索を開始するインデックスです</value>
  </data>
  <data name="ArrayList_BinarySearch_Summary" xml:space="preserve">
    <value>ソート済みリストに対して２分探索を行います</value>
  </data>
  <data name="ArrayList_BinarySearch_Value" xml:space="preserve">
    <value>検索する値です</value>
  </data>
  <data name="ArrayList_BinarySearch_X" xml:space="preserve">
    <value>比較関数の１つ目の引数です</value>
  </data>
  <data name="ArrayList_BinarySearch_Y" xml:space="preserve">
    <value>比較関数の２つ目の引数です</value>
  </data>
  <data name="ArrayList_FindIndex_Count" xml:space="preserve">
    <value>検索する個数です</value>
  </data>
  <data name="ArrayList_FindIndex_FoundIndex" xml:space="preserve">
    <value>見つかったインデックスです</value>
  </data>
  <data name="ArrayList_FindIndex_Predicate" xml:space="preserve">
    <value>比較するときのイベントです</value>
  </data>
  <data name="ArrayList_FindIndex_Result" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="ArrayList_FindIndex_StartIndex" xml:space="preserve">
    <value>検索を開始するインデックスです</value>
  </data>
  <data name="ArrayList_FindIndex_Summary" xml:space="preserve">
    <value>指定した要素が最初に現れるインデックスを見つけます</value>
  </data>
  <data name="ArrayList_FindIndex_Value" xml:space="preserve">
    <value>比較する値です</value>
  </data>
  <data name="ArrayList_FindLastIndex_Count" xml:space="preserve">
    <value>検索する個数です</value>
  </data>
  <data name="ArrayList_FindLastIndex_FoundIndex" xml:space="preserve">
    <value>見つかったインデックスです</value>
  </data>
  <data name="ArrayList_FindLastIndex_Predicate" xml:space="preserve">
    <value>比較するときのイベントです</value>
  </data>
  <data name="ArrayList_FindLastIndex_Result" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="ArrayList_FindLastIndex_StartIndex" xml:space="preserve">
    <value>検索を開始するインデックスです</value>
  </data>
  <data name="ArrayList_FindLastIndex_Summary" xml:space="preserve">
    <value>指定した要素が最後に現れるインデックスを見つけます</value>
  </data>
  <data name="ArrayList_FindLastIndex_Value" xml:space="preserve">
    <value>比較する値です</value>
  </data>
  <data name="ArrayList_RemoveAll_Predicate" xml:space="preserve">
    <value>比較するときのイベントです</value>
  </data>
  <data name="ArrayList_RemoveAll_Result" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="ArrayList_RemoveAll_Summary" xml:space="preserve">
    <value>条件にマッチする要素を全て削除します</value>
  </data>
  <data name="ArrayList_RemoveAll_Value" xml:space="preserve">
    <value>比較する値です</value>
  </data>
  <data name="ArrayList_Reverse_Count" xml:space="preserve">
    <value>リバースする個数です</value>
  </data>
  <data name="ArrayList_Reverse_StartIndex" xml:space="preserve">
    <value>リバースを開始するインデックスです</value>
  </data>
  <data name="ArrayList_Sort_Compare" xml:space="preserve">
    <value>比較するときのイベントです</value>
  </data>
  <data name="ArrayList_Sort_Count" xml:space="preserve">
    <value>比較する個数です</value>
  </data>
  <data name="ArrayList_Sort_Result" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="ArrayList_Sort_StartIndex" xml:space="preserve">
    <value>比較を開始するインデックスです</value>
  </data>
  <data name="ArrayList_Sort_Summary" xml:space="preserve">
    <value>リストをソートします</value>
  </data>
  <data name="ArrayList_Sort_X" xml:space="preserve">
    <value>比較関数の１つ目の引数です</value>
  </data>
  <data name="ArrayList_Sort_Y" xml:space="preserve">
    <value>比較関数の２つ目の引数です</value>
  </data>
  <data name="Enumerable_Grouping_Value_Grouping" xml:space="preserve">
    <value>グループです</value>
  </data>
  <data name="Enumerable_Grouping_Value_Key" xml:space="preserve">
    <value>グループのキーです</value>
  </data>
  <data name="Enumerable_Grouping_Value_Summary" xml:space="preserve">
    <value>グループのデータを取得します</value>
  </data>
  <data name="Enumerable_Lookup_Contains_Key" xml:space="preserve">
    <value>キーです</value>
  </data>
  <data name="Enumerable_Lookup_Contains_Lookup" xml:space="preserve">
    <value>ルックアップです</value>
  </data>
  <data name="Enumerable_Lookup_Contains_Result" xml:space="preserve">
    <value>キーを含むかどうかです</value>
  </data>
  <data name="Enumerable_Lookup_Contains_Summary" xml:space="preserve">
    <value>ルックアップにキーを含むかどうかを調べます</value>
  </data>
  <data name="Enumerable_Lookup_Value_Count" xml:space="preserve">
    <value>キーとペアの個数です</value>
  </data>
  <data name="Enumerable_Lookup_Value_EnumerableWithKey" xml:space="preserve">
    <value>キーに関連付けられた列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Lookup_Value_Key" xml:space="preserve">
    <value>キーです</value>
  </data>
  <data name="Enumerable_Lookup_Value_Lookup" xml:space="preserve">
    <value>ルックアップです</value>
  </data>
  <data name="Enumerable_Lookup_Value_Summary" xml:space="preserve">
    <value>ルックアップから情報を取得します</value>
  </data>
  <data name="Enumerable_Ordered_ThenByDescending_Compare" xml:space="preserve">
    <value>要素の比較時のイベントです</value>
  </data>
  <data name="Enumerable_Ordered_ThenByDescending_CompareResult" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="Enumerable_Ordered_ThenByDescending_OrderedEnumerable" xml:space="preserve">
    <value>並び替えられた列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Ordered_ThenByDescending_Select" xml:space="preserve">
    <value>要素の選択時のイベントです</value>
  </data>
  <data name="Enumerable_Ordered_ThenByDescending_SelectResult" xml:space="preserve">
    <value>選択関数の結果です</value>
  </data>
  <data name="Enumerable_Ordered_ThenByDescending_Summary" xml:space="preserve">
    <value>並び替えられた列挙可能な一覧をさらに降順に並び替えます</value>
  </data>
  <data name="Enumerable_Ordered_ThenByDescending_Value" xml:space="preserve">
    <value>選択関数の引数です</value>
  </data>
  <data name="Enumerable_Ordered_ThenByDescending_X" xml:space="preserve">
    <value>比較関数の１つ目の引数です</value>
  </data>
  <data name="Enumerable_Ordered_ThenByDescending_Y" xml:space="preserve">
    <value>比較関数の２つ目の引数です</value>
  </data>
  <data name="Enumerable_Ordered_ThenBy_Compare" xml:space="preserve">
    <value>要素の比較時のイベントです</value>
  </data>
  <data name="Enumerable_Ordered_ThenBy_CompareResult" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="Enumerable_Ordered_ThenBy_OrderedEnumerable" xml:space="preserve">
    <value>並び替えられた列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Ordered_ThenBy_Select" xml:space="preserve">
    <value>要素の選択時のイベントです</value>
  </data>
  <data name="Enumerable_Ordered_ThenBy_SelectResult" xml:space="preserve">
    <value>選択関数の結果です</value>
  </data>
  <data name="Enumerable_Ordered_ThenBy_Summary" xml:space="preserve">
    <value>並び替えられた列挙可能な一覧をさらに昇順に並び替えます</value>
  </data>
  <data name="Enumerable_Ordered_ThenBy_Value" xml:space="preserve">
    <value>選択関数の引数です</value>
  </data>
  <data name="Enumerable_Ordered_ThenBy_X" xml:space="preserve">
    <value>比較関数の１つ目の引数です</value>
  </data>
  <data name="Enumerable_Ordered_ThenBy_Y" xml:space="preserve">
    <value>比較関数の２つ目の引数です</value>
  </data>
  <data name="Enumerable_Aggregate_Accumurate" xml:space="preserve">
    <value>結合するときのイベントです</value>
  </data>
  <data name="Enumerable_Aggregate_Aggregate" xml:space="preserve">
    <value>結合された要素を取得します</value>
  </data>
  <data name="Enumerable_Aggregate_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Aggregate_Obj1" xml:space="preserve">
    <value>結合する１つ目の要素です</value>
  </data>
  <data name="Enumerable_Aggregate_Obj2" xml:space="preserve">
    <value>結合する２つ目の要素です</value>
  </data>
  <data name="Enumerable_Aggregate_Result" xml:space="preserve">
    <value>結合した結果です</value>
  </data>
  <data name="Enumerable_Aggregate_Summary" xml:space="preserve">
    <value>列挙可能な一覧を結合します</value>
  </data>
  <data name="Enumerable_Aggregate_ResultSelect" xml:space="preserve">
    <value>結合結果の要素を結果を選択するときのイベントです</value>
  </data>
  <data name="Enumerable_Aggregate_ResultSelectResult" xml:space="preserve">
    <value>選択した結果です</value>
  </data>
  <data name="Enumerable_Aggregate_ResultSelectValue" xml:space="preserve">
    <value>選択する値です</value>
  </data>
  <data name="Enumerable_Aggregate_Seed" xml:space="preserve">
    <value>結合するときの初期値です</value>
  </data>
  <data name="Enumerable_All_All" xml:space="preserve">
    <value>全て条件を満たすかどうかを取得します</value>
  </data>
  <data name="Enumerable_All_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_All_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_All_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_All_Summary" xml:space="preserve">
    <value>列挙可能な一覧の全ての要素が条件を満たすかどうかを調べます</value>
  </data>
  <data name="Enumerable_All_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_Any_Any" xml:space="preserve">
    <value>どれかが条件を満たすかどうかを取得します</value>
  </data>
  <data name="Enumerable_Any_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Any_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_Any_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_Any_Summary" xml:space="preserve">
    <value>列挙可能な一覧のどれかの要素が条件を満たすかどうかを調べます</value>
  </data>
  <data name="Enumerable_Any_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_Average_Average" xml:space="preserve">
    <value>平均を取得します</value>
  </data>
  <data name="Enumerable_Average_Result" xml:space="preserve">
    <value>選択するときの結果です</value>
  </data>
  <data name="Enumerable_Average_Summary" xml:space="preserve">
    <value>列挙可能な一覧の平均を計算します</value>
  </data>
  <data name="Enumerable_Concat_Enumerable" xml:space="preserve">
    <value>結合した列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Concat_First" xml:space="preserve">
    <value>１つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Concat_Second" xml:space="preserve">
    <value>２つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Concat_Summary" xml:space="preserve">
    <value>列挙可能な一覧を結合した列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_Contains_Contains" xml:space="preserve">
    <value>特定の要素が含まれるかどうかです</value>
  </data>
  <data name="Enumerable_Contains_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Contains_Summary" xml:space="preserve">
    <value>列挙可能な一覧に特定の要素が含まれるかどうかを調べます</value>
  </data>
  <data name="Enumerable_Contains_Value" xml:space="preserve">
    <value>対象の要素です</value>
  </data>
  <data name="Enumerable_CountWithPredicate_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_CountWithPredicate_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_CountWithPredicate_Summary" xml:space="preserve">
    <value>列挙可能な一覧内で条件を満たす要素の個数を調べます</value>
  </data>
  <data name="Enumerable_CountWithPredicate_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_Count_Count" xml:space="preserve">
    <value>個数です</value>
  </data>
  <data name="Enumerable_Count_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Count_Summary" xml:space="preserve">
    <value>列挙可能な一覧の個数を調べます</value>
  </data>
  <data name="Enumerable_DefaultIfEmpty_Default" xml:space="preserve">
    <value>デフォルト値です</value>
  </data>
  <data name="Enumerable_DefaultIfEmpty_Enumerable" xml:space="preserve">
    <value>列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_DefaultIfEmpty_Summary" xml:space="preserve">
    <value>列挙可能な一覧が空の場合にデフォルト値のみの列挙可能な一覧を返します</value>
  </data>
  <data name="Enumerable_Distinct_Enumerable" xml:space="preserve">
    <value>列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Distinct_Summary" xml:space="preserve">
    <value>列挙可能な一覧で重複している要素がある場合ひとつにした列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_ElementAtOrDefault_Default" xml:space="preserve">
    <value>デフォルト値です</value>
  </data>
  <data name="Enumerable_ElementAtOrDefault_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_ElementAtOrDefault_Index" xml:space="preserve">
    <value>インデックスです</value>
  </data>
  <data name="Enumerable_ElementAtOrDefault_Summary" xml:space="preserve">
    <value>列挙可能な一覧の特定のインデックスの要素が範囲外の場合にデフォルト値を取得します</value>
  </data>
  <data name="Enumerable_ElementAtOrDefault_Value" xml:space="preserve">
    <value>特定のインデックスの要素かデフォルト値です</value>
  </data>
  <data name="Enumerable_ElementAt_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_ElementAt_Index" xml:space="preserve">
    <value>インデックスです</value>
  </data>
  <data name="Enumerable_ElementAt_Summary" xml:space="preserve">
    <value>列挙可能な一覧の特定のインデックスの要素を取得します</value>
  </data>
  <data name="Enumerable_ElementAt_Value" xml:space="preserve">
    <value>特定のインデックスの要素です</value>
  </data>
  <data name="Enumerable_Except_Enumerable" xml:space="preserve">
    <value>要素が取り除かれた列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Except_First" xml:space="preserve">
    <value>１つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Except_Second" xml:space="preserve">
    <value>２つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Except_Summary" xml:space="preserve">
    <value>列挙可能な一覧から別の列挙可能な一覧の要素を除いた列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_FirstOrDefaultWithPredicate_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_FirstOrDefaultWithPredicate_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_FirstOrDefaultWithPredicate_Summary" xml:space="preserve">
    <value>列挙可能な一覧で条件を満たす最初の要素かデフォルト値を取得します</value>
  </data>
  <data name="Enumerable_FirstOrDefaultWithPredicate_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_FirstOrDefault_Default" xml:space="preserve">
    <value>デフォルト値です</value>
  </data>
  <data name="Enumerable_FirstOrDefault_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_FirstOrDefault_First" xml:space="preserve">
    <value>先頭の要素かデフォルト値です</value>
  </data>
  <data name="Enumerable_FirstWithPredicate_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_FirstWithPredicate_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_FirstWithPredicate_Summary" xml:space="preserve">
    <value>列挙可能な一覧で条件を満たす最初の要素を取得します</value>
  </data>
  <data name="Enumerable_FirstWithPredicate_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_First_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_First_First" xml:space="preserve">
    <value>先頭の要素です</value>
  </data>
  <data name="Enumerable_First_Summary" xml:space="preserve">
    <value>列挙可能な一覧の先頭の要素を取得します</value>
  </data>
  <data name="Enumerable_GroupBy_ElementSelect" xml:space="preserve">
    <value>値を選択するときのイベントです</value>
  </data>
  <data name="Enumerable_GroupBy_ElementSelectResult" xml:space="preserve">
    <value>値を選択するときの結果です</value>
  </data>
  <data name="Enumerable_GroupBy_ElementSelectValue" xml:space="preserve">
    <value>値を選択するときの値です</value>
  </data>
  <data name="Enumerable_GroupBy_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_GroupBy_Grouping" xml:space="preserve">
    <value>グループです</value>
  </data>
  <data name="Enumerable_GroupBy_Result" xml:space="preserve">
    <value>キーを選択するときの結果です</value>
  </data>
  <data name="Enumerable_GroupBy_ResultSelect" xml:space="preserve">
    <value>結果を選択するときのイベントです</value>
  </data>
  <data name="Enumerable_GroupBy_ResultSelectKey" xml:space="preserve">
    <value>結果を選択するときのキーです</value>
  </data>
  <data name="Enumerable_GroupBy_ResultSelectResult" xml:space="preserve">
    <value>結果を選択するときの結果です</value>
  </data>
  <data name="Enumerable_GroupBy_ResultSelectValues" xml:space="preserve">
    <value>結果を選択するときの値の一覧です</value>
  </data>
  <data name="Enumerable_GroupBy_Select" xml:space="preserve">
    <value>グループのキーを選択するときのイベントです</value>
  </data>
  <data name="Enumerable_GroupBy_Summary" xml:space="preserve">
    <value>列挙可能な一覧をグループに分けます</value>
  </data>
  <data name="Enumerable_GroupBy_Value" xml:space="preserve">
    <value>キーを選択するときの値です</value>
  </data>
  <data name="Enumerable_GroupJoin_Enumerable" xml:space="preserve">
    <value>列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_GroupJoin_InnerEnumerable" xml:space="preserve">
    <value>別の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_GroupJoin_InnerSelect" xml:space="preserve">
    <value>別の列挙可能な一覧のキーを選択するときのイベントです</value>
  </data>
  <data name="Enumerable_GroupJoin_InnerSelectResult" xml:space="preserve">
    <value>別の列挙可能な一覧を選択するときの結果です</value>
  </data>
  <data name="Enumerable_GroupJoin_InnerSelectValue" xml:space="preserve">
    <value>別の列挙可能な一覧を選択するときの値です</value>
  </data>
  <data name="Enumerable_GroupJoin_OuterSelect" xml:space="preserve">
    <value>列挙可能な一覧のキーを選択するときのイベントです</value>
  </data>
  <data name="Enumerable_GroupJoin_OuterSelectResult" xml:space="preserve">
    <value>列挙可能な一覧を選択するときの結果です</value>
  </data>
  <data name="Enumerable_GroupJoin_OuterSelectValue" xml:space="preserve">
    <value>列挙可能な一覧を選択するときの値です</value>
  </data>
  <data name="Enumerable_GroupJoin_ResultSelect" xml:space="preserve">
    <value>結果を選択するときのイベントです</value>
  </data>
  <data name="Enumerable_GroupJoin_ResultSelectResult" xml:space="preserve">
    <value>結果を選択するときの結果です</value>
  </data>
  <data name="Enumerable_GroupJoin_ResultSelectValue" xml:space="preserve">
    <value>結果を選択するときのキーです</value>
  </data>
  <data name="Enumerable_GroupJoin_ResultSelectValues" xml:space="preserve">
    <value>結果を選択するときの値の一覧です</value>
  </data>
  <data name="Enumerable_GroupJoin_Summary" xml:space="preserve">
    <value>２つの列挙可能な一覧で共通するキーを元にグループを作成します</value>
  </data>
  <data name="Enumerable_Intersect_Enumerable" xml:space="preserve">
    <value>共通の要素で構成される列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Intersect_First" xml:space="preserve">
    <value>１つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Intersect_Second" xml:space="preserve">
    <value>２つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Intersect_Summary" xml:space="preserve">
    <value>２つの列挙可能な一覧の共通する要素をもつ列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_LastOrDefaultWithPredicate_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_LastOrDefaultWithPredicate_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_LastOrDefaultWithPredicate_Summary" xml:space="preserve">
    <value>列挙可能な一覧で条件を満たす最後の要素かデフォルト値を返します</value>
  </data>
  <data name="Enumerable_LastOrDefaultWithPredicate_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_LastOrDefault_Default" xml:space="preserve">
    <value>デフォルト値です</value>
  </data>
  <data name="Enumerable_LastOrDefault_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_LastOrDefault_Last" xml:space="preserve">
    <value>最後の要素です</value>
  </data>
  <data name="Enumerable_LastOrDefault_Summary" xml:space="preserve">
    <value>列挙可能な一覧の最後の要素かデフォルト値を返します</value>
  </data>
  <data name="Enumerable_LastWithPredicate_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_LastWithPredicate_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_LastWithPredicate_Summary" xml:space="preserve">
    <value>列挙可能な一覧で条件を満たす最後の要素を返します</value>
  </data>
  <data name="Enumerable_LastWithPredicate_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_Last_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Last_Last" xml:space="preserve">
    <value>最後の要素です</value>
  </data>
  <data name="Enumerable_Last_Summary" xml:space="preserve">
    <value>列挙可能な一覧の最後の要素を取得します</value>
  </data>
  <data name="Enumerable_Max_Max" xml:space="preserve">
    <value>最大値です</value>
  </data>
  <data name="Enumerable_Max_Result" xml:space="preserve">
    <value>選択するときの結果です</value>
  </data>
  <data name="Enumerable_Max_Summary" xml:space="preserve">
    <value>列挙可能な一覧の中で最大値を取得します</value>
  </data>
  <data name="Enumerable_Min_Min" xml:space="preserve">
    <value>最小値です</value>
  </data>
  <data name="Enumerable_Min_Result" xml:space="preserve">
    <value>選択するときの結果です</value>
  </data>
  <data name="Enumerable_Min_Summary" xml:space="preserve">
    <value>列挙可能な一覧の中で最小値を取得します</value>
  </data>
  <data name="Enumerable_Average_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Average_Select" xml:space="preserve">
    <value>選択するときのイベントです</value>
  </data>
  <data name="Enumerable_Average_Value" xml:space="preserve">
    <value>選択するときの値です</value>
  </data>
  <data name="Enumerable_Max_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Max_Select" xml:space="preserve">
    <value>選択するときのイベントです</value>
  </data>
  <data name="Enumerable_Max_Value" xml:space="preserve">
    <value>選択するときの値です</value>
  </data>
  <data name="Enumerable_Min_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Min_Select" xml:space="preserve">
    <value>選択するときのイベントです</value>
  </data>
  <data name="Enumerable_Min_Value" xml:space="preserve">
    <value>選択するときの値です</value>
  </data>
  <data name="Enumerable_OrderByDescending_Compare" xml:space="preserve">
    <value>比較するときのイベントです</value>
  </data>
  <data name="Enumerable_OrderByDescending_CompareResult" xml:space="preserve">
    <value>比較関数の結果です</value>
  </data>
  <data name="Enumerable_OrderByDescending_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_OrderByDescending_OrderedEnumerable" xml:space="preserve">
    <value>並び替えられた列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_OrderByDescending_Select" xml:space="preserve">
    <value>選択するときのイベントです</value>
  </data>
  <data name="Enumerable_OrderByDescending_SelectResult" xml:space="preserve">
    <value>選択するときの結果です</value>
  </data>
  <data name="Enumerable_OrderByDescending_Summary" xml:space="preserve">
    <value>列挙可能な一覧を降順に並び替えた列挙可能な一覧にソートします</value>
  </data>
  <data name="Enumerable_OrderByDescending_Value" xml:space="preserve">
    <value>選択するときの値です</value>
  </data>
  <data name="Enumerable_OrderByDescending_X" xml:space="preserve">
    <value>比較関数の１つ目の引数です</value>
  </data>
  <data name="Enumerable_OrderByDescending_Y" xml:space="preserve">
    <value>比較関数の２つ目の引数です</value>
  </data>
  <data name="Enumerable_OrderBy_Compare" xml:space="preserve">
    <value>比較するときのイベントです</value>
  </data>
  <data name="Enumerable_OrderBy_CompareResult" xml:space="preserve">
    <value>比較関数の結果です</value>
  </data>
  <data name="Enumerable_OrderBy_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_OrderBy_OrderedEnumerable" xml:space="preserve">
    <value>並び替えられた列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_OrderBy_Select" xml:space="preserve">
    <value>選択するときのイベントです</value>
  </data>
  <data name="Enumerable_OrderBy_SelectResult" xml:space="preserve">
    <value>選択するときの結果です</value>
  </data>
  <data name="Enumerable_OrderBy_Summary" xml:space="preserve">
    <value>列挙可能な一覧を昇順に並び替えた列挙可能な一覧にソートします</value>
  </data>
  <data name="Enumerable_OrderBy_Value" xml:space="preserve">
    <value>選択するときの値です</value>
  </data>
  <data name="Enumerable_OrderBy_X" xml:space="preserve">
    <value>比較関数の１つ目の引数です</value>
  </data>
  <data name="Enumerable_OrderBy_Y" xml:space="preserve">
    <value>比較関数の２つ目の引数です</value>
  </data>
  <data name="Enumerable_Reverse_Enumerable" xml:space="preserve">
    <value>列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Reverse_Summary" xml:space="preserve">
    <value>列挙可能な一覧の順番を逆にした列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_SelectMany_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_SelectMany_Index" xml:space="preserve">
    <value>選択するときの要素のインデックスです</value>
  </data>
  <data name="Enumerable_SelectMany_Result" xml:space="preserve">
    <value>選択するときの結果です</value>
  </data>
  <data name="Enumerable_SelectMany_Select" xml:space="preserve">
    <value>選択するときのイベントです</value>
  </data>
  <data name="Enumerable_SelectMany_Summary" xml:space="preserve">
    <value>列挙可能な一覧の要素を選択します</value>
  </data>
  <data name="Enumerable_SelectMany_Value" xml:space="preserve">
    <value>選択するときの値です</value>
  </data>
  <data name="Enumerable_Select_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Select_Result" xml:space="preserve">
    <value>選択するときの結果です</value>
  </data>
  <data name="Enumerable_Select_Select" xml:space="preserve">
    <value>選択するときのイベントです</value>
  </data>
  <data name="Enumerable_Select_Summary" xml:space="preserve">
    <value>列挙可能な一覧の要素を選択します</value>
  </data>
  <data name="Enumerable_Select_Value" xml:space="preserve">
    <value>選択するときの値です</value>
  </data>
  <data name="Enumerable_SequentialEqual_First" xml:space="preserve">
    <value>１つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_SequentialEqual_Second" xml:space="preserve">
    <value>２つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_SequentialEqual_Summary" xml:space="preserve">
    <value>２つの列挙可能な一覧が同じ順番で同じ要素で構成されているかどうかを調べます</value>
  </data>
  <data name="Enumerable_SequentialEqual_Value" xml:space="preserve">
    <value>同じ順番で同じ要素で構成されているかどうかです</value>
  </data>
  <data name="Enumerable_SingleOrDefault_Default" xml:space="preserve">
    <value>デフォルト値です</value>
  </data>
  <data name="Enumerable_SingleOrDefault_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_SingleOrDefault_Single" xml:space="preserve">
    <value>取得した要素です</value>
  </data>
  <data name="Enumerable_SingleOrDefault_Summary" xml:space="preserve">
    <value>列挙可能な一覧が１つの要素のみを持つ場合にその要素、そうでない場合はデフォルト値を取得します</value>
  </data>
  <data name="Enumerable_SingleWithPredicate_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_SingleWithPredicate_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_SingleWithPredicate_Summary" xml:space="preserve">
    <value>列挙可能な一覧で条件を満たす要素が１つのみの場合にその要素を取得します</value>
  </data>
  <data name="Enumerable_SingleWithPredicate_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_Single_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Single_Single" xml:space="preserve">
    <value>取得した要素です</value>
  </data>
  <data name="Enumerable_Single_Summary" xml:space="preserve">
    <value>列挙可能な一覧が１つの要素のみを持つ場合にその要素を取得します</value>
  </data>
  <data name="Enumerable_SkipWhile_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_SkipWhile_Index" xml:space="preserve">
    <value>条件を調べる要素のインデックスです</value>
  </data>
  <data name="Enumerable_SkipWhile_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_SkipWhile_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_SkipWhile_Summary" xml:space="preserve">
    <value>列挙可能な一覧で条件を満たす間飛ばした列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_SkipWhile_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_Skip_Count" xml:space="preserve">
    <value>飛ばす数です</value>
  </data>
  <data name="Enumerable_Skip_Enumerable" xml:space="preserve">
    <value>列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Skip_Summary" xml:space="preserve">
    <value>列挙可能な一覧で特定の個数飛ばした列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_Sum_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Sum_Result" xml:space="preserve">
    <value>選択するときの結果です</value>
  </data>
  <data name="Enumerable_Sum_Select" xml:space="preserve">
    <value>選択するときのイベントです</value>
  </data>
  <data name="Enumerable_Sum_Sum" xml:space="preserve">
    <value>要素の合計です</value>
  </data>
  <data name="Enumerable_Sum_Summary" xml:space="preserve">
    <value>列挙可能な一覧で要素の合計を計算します</value>
  </data>
  <data name="Enumerable_Sum_Value" xml:space="preserve">
    <value>選択するときの値です</value>
  </data>
  <data name="Enumerable_TakeWhile_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_TakeWhile_Index" xml:space="preserve">
    <value>条件を調べる要素のインデックスです</value>
  </data>
  <data name="Enumerable_TakeWhile_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_TakeWhile_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_TakeWhile_Summary" xml:space="preserve">
    <value>列挙可能な一覧で条件を満たす間の要素からなる列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_TakeWhile_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_Take_Count" xml:space="preserve">
    <value>個数です</value>
  </data>
  <data name="Enumerable_Take_Enumerable" xml:space="preserve">
    <value>列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Take_Summary" xml:space="preserve">
    <value>列挙可能な一覧から特定の個数だけからなる列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_ToArrayList_ArrayList" xml:space="preserve">
    <value>リストです</value>
  </data>
  <data name="Enumerable_ToArrayList_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_ToArrayList_Summary" xml:space="preserve">
    <value>列挙可能な一覧をリストに変換します</value>
  </data>
  <data name="Enumerable_ToArray_Array" xml:space="preserve">
    <value>配列です</value>
  </data>
  <data name="Enumerable_ToArray_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_ToArray_Summary" xml:space="preserve">
    <value>列挙可能な一覧を配列に変換します</value>
  </data>
  <data name="Enumerable_ToHashtable_ElementSelect" xml:space="preserve">
    <value>値を選択するときのイベントです</value>
  </data>
  <data name="Enumerable_ToHashtable_ElementSelectResult" xml:space="preserve">
    <value>値を選択するときの結果です</value>
  </data>
  <data name="Enumerable_ToHashtable_ElementSelectValue" xml:space="preserve">
    <value>値を選択するときの値です</value>
  </data>
  <data name="Enumerable_ToHashtable_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_ToHashtable_Hashtable" xml:space="preserve">
    <value>ハッシュテーブルです</value>
  </data>
  <data name="Enumerable_ToHashtable_Result" xml:space="preserve">
    <value>キーを選択するときの結果です</value>
  </data>
  <data name="Enumerable_ToHashtable_Select" xml:space="preserve">
    <value>キーを選択するときのイベントです</value>
  </data>
  <data name="Enumerable_ToHashtable_Summary" xml:space="preserve">
    <value>列挙可能な一覧をハッシュテーブルに変換します</value>
  </data>
  <data name="Enumerable_ToHashtable_Value" xml:space="preserve">
    <value>キーを選択するときの値です</value>
  </data>
  <data name="Enumerable_ToLookup_ElementSelect" xml:space="preserve">
    <value>値を選択するときのイベントです</value>
  </data>
  <data name="Enumerable_ToLookup_ElementSelectResult" xml:space="preserve">
    <value>値を選択するときの結果です</value>
  </data>
  <data name="Enumerable_ToLookup_ElementSelectValue" xml:space="preserve">
    <value>値を選択するときの値です</value>
  </data>
  <data name="Enumerable_ToLookup_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_ToLookup_Lookup" xml:space="preserve">
    <value>ルックアップです</value>
  </data>
  <data name="Enumerable_ToLookup_Result" xml:space="preserve">
    <value>キーを選択するときの結果です</value>
  </data>
  <data name="Enumerable_ToLookup_Select" xml:space="preserve">
    <value>キーを選択するときのイベントです</value>
  </data>
  <data name="Enumerable_ToLookup_Summary" xml:space="preserve">
    <value>列挙可能な一覧をルックアップに変換します</value>
  </data>
  <data name="Enumerable_ToLookup_Value" xml:space="preserve">
    <value>キーを選択するときの値です</value>
  </data>
  <data name="Enumerable_Union_Enumerable" xml:space="preserve">
    <value>列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Union_First" xml:space="preserve">
    <value>１つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Union_Second" xml:space="preserve">
    <value>２つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Union_Summary" xml:space="preserve">
    <value>２つの列挙可能な一覧でどちらかに含まれる要素からなる列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_Where_Enumerable" xml:space="preserve">
    <value>対象の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Where_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_Where_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_Where_Summary" xml:space="preserve">
    <value>列挙可能な一覧で条件を満たす要素からなる列挙可能な一覧を取得します</value>
  </data>
  <data name="Enumerable_Where_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Enumerable_Zip_Enumerable" xml:space="preserve">
    <value>列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Zip_First" xml:space="preserve">
    <value>１つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Zip_Obj1" xml:space="preserve">
    <value>選択するときの１つ目の値です</value>
  </data>
  <data name="Enumerable_Zip_Obj2" xml:space="preserve">
    <value>選択するときの２つ目の値です</value>
  </data>
  <data name="Enumerable_Zip_Result" xml:space="preserve">
    <value>選択するときの結果です</value>
  </data>
  <data name="Enumerable_Zip_Second" xml:space="preserve">
    <value>２つ目の列挙可能な一覧です</value>
  </data>
  <data name="Enumerable_Zip_Select" xml:space="preserve">
    <value>選択するときのイベントです</value>
  </data>
  <data name="Enumerable_Zip_Summary" xml:space="preserve">
    <value>２つの列挙可能な一覧の各要素を１つの要素にまとめ列挙可能な一覧として返します</value>
  </data>
  <data name="Enumerable_FirstOrDefault_Summary" xml:space="preserve">
    <value>列挙可能な一覧で最初の要素かデフォルト値を取得します</value>
  </data>
  <data name="Enumerable_Select_Index" xml:space="preserve">
    <value>選択するときの要素のインデックスです</value>
  </data>
  <data name="Enumerable_SingleOrDefaultWithPredicate_Predicate" xml:space="preserve">
    <value>条件を満たしているか調べるときのイベントです</value>
  </data>
  <data name="Enumerable_SingleOrDefaultWithPredicate_Result" xml:space="preserve">
    <value>条件を満たしているかの結果です</value>
  </data>
  <data name="Enumerable_SingleOrDefaultWithPredicate_Summary" xml:space="preserve">
    <value>列挙可能な一覧で条件を満たす要素が１つのみの場合にその要素、そうでない場合はデフォルト値を取得します</value>
  </data>
  <data name="Enumerable_SingleOrDefaultWithPredicate_Value" xml:space="preserve">
    <value>条件を調べる値です</value>
  </data>
  <data name="Repeat_Foreach_Enumerable" xml:space="preserve">
    <value>リピート回数の元となるEnumerableです</value>
  </data>
  <data name="String_NewLine_Summary" xml:space="preserve">
    <value>改行文字列を取得します</value>
  </data>
  <data name="String_NewLine_Value" xml:space="preserve">
    <value>改行文字列です</value>
  </data>
  <data name="Logic_Switch_Default" xml:space="preserve">
    <value>いずれの値にも等しくなかった場合に実行されるイベントです</value>
  </data>
  <data name="Logic_Switch_Out1" xml:space="preserve">
    <value>Target1の値に等しいときに実行されるイベントです</value>
  </data>
  <data name="Logic_Switch_Out2" xml:space="preserve">
    <value>Target2の値に等しいときに実行されるイベントです</value>
  </data>
  <data name="Logic_Switch_Out3" xml:space="preserve">
    <value>Target3の値に等しいときに実行されるイベントです</value>
  </data>
  <data name="Logic_Switch_Out4" xml:space="preserve">
    <value>Target4の値に等しいときに実行されるイベントです</value>
  </data>
  <data name="Logic_Switch_Out5" xml:space="preserve">
    <value>Target5の値に等しいときに実行されるイベントです</value>
  </data>
  <data name="Logic_Switch_Out6" xml:space="preserve">
    <value>Target6の値に等しいときに実行されるイベントです</value>
  </data>
  <data name="Logic_Switch_Summary" xml:space="preserve">
    <value>既定の演算子を使用して特定の値に等しい場合にイベントを実行します</value>
  </data>
  <data name="Logic_Switch_Target1" xml:space="preserve">
    <value>１つ目の比較する値です</value>
  </data>
  <data name="Logic_Switch_Target2" xml:space="preserve">
    <value>２つ目の比較する値です</value>
  </data>
  <data name="Logic_Switch_Target3" xml:space="preserve">
    <value>３つ目の比較する値です</value>
  </data>
  <data name="Logic_Switch_Target4" xml:space="preserve">
    <value>４つ目の比較する値です</value>
  </data>
  <data name="Logic_Switch_Target5" xml:space="preserve">
    <value>５つ目の比較する値です</value>
  </data>
  <data name="Logic_Switch_Target6" xml:space="preserve">
    <value>６つ目の比較する値です</value>
  </data>
  <data name="Logic_Switch_Value" xml:space="preserve">
    <value>比較する値です</value>
  </data>
  <data name="Logic_OnceGate_Out" xml:space="preserve">
    <value>一度だけ実行されるイベントです</value>
  </data>
  <data name="Logic_OnceGate_Summary" xml:space="preserve">
    <value>一度だけ実行可能なゲートです</value>
  </data>
  <data name="Bit_And_A" xml:space="preserve">
    <value>１つ目の引数です</value>
  </data>
  <data name="Bit_And_B" xml:space="preserve">
    <value>２つ目の引数です</value>
  </data>
  <data name="Bit_And_Summary" xml:space="preserve">
    <value>ビット積を計算します</value>
  </data>
  <data name="Bit_And_Value" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_Complement_Result" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_Complement_Summary" xml:space="preserve">
    <value>ビットごとの反転した値を取得します</value>
  </data>
  <data name="Bit_Complement_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_IsPowerOfTwo_Result" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_IsPowerOfTwo_Summary" xml:space="preserve">
    <value>２のべき乗の数かどうかを取得します</value>
  </data>
  <data name="Bit_IsPowerOfTwo_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_LeadingZerosCount_Count" xml:space="preserve">
    <value>先頭の０の個数です</value>
  </data>
  <data name="Bit_LeadingZerosCount_Summary" xml:space="preserve">
    <value>先頭の０の個数を取得します</value>
  </data>
  <data name="Bit_LeadingZerosCount_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_LeastSignificant_Index" xml:space="preserve">
    <value>インデックスです</value>
  </data>
  <data name="Bit_LeastSignificant_Summary" xml:space="preserve">
    <value>一番小さい１になっているビットのインデックスを取得します</value>
  </data>
  <data name="Bit_LeastSignificant_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_LeftShift_A" xml:space="preserve">
    <value>対象の値です</value>
  </data>
  <data name="Bit_LeftShift_B" xml:space="preserve">
    <value>シフトするビット量です</value>
  </data>
  <data name="Bit_LeftShift_Summary" xml:space="preserve">
    <value>左にビットシフトした値を取得します</value>
  </data>
  <data name="Bit_LeftShift_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_MostSignificant_Index" xml:space="preserve">
    <value>インデックスです</value>
  </data>
  <data name="Bit_MostSignificant_Summary" xml:space="preserve">
    <value>一番大きい１になっているビットのインデックスを取得します</value>
  </data>
  <data name="Bit_MostSignificant_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_NextLargestPowerOfTwo_Result" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_NextLargestPowerOfTwo_Summary" xml:space="preserve">
    <value>一番近い大きい２のべき乗の数を取得します</value>
  </data>
  <data name="Bit_NextLargestPowerOfTwo_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_OnesCount_Count" xml:space="preserve">
    <value>個数です</value>
  </data>
  <data name="Bit_OnesCount_Summary" xml:space="preserve">
    <value>１のビット数を取得します</value>
  </data>
  <data name="Bit_OnesCount_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_Or_A" xml:space="preserve">
    <value>１つ目の引数です</value>
  </data>
  <data name="Bit_Or_B" xml:space="preserve">
    <value>２つ目の引数です</value>
  </data>
  <data name="Bit_Or_Summary" xml:space="preserve">
    <value>ビット和を計算します</value>
  </data>
  <data name="Bit_Or_Value" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_PreviousLargestPowerOfTwo_Result" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_PreviousLargestPowerOfTwo_Summary" xml:space="preserve">
    <value>一番近い小さい２のべき乗の数を取得します</value>
  </data>
  <data name="Bit_PreviousLargestPowerOfTwo_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_ReadableString_String" xml:space="preserve">
    <value>ビット文字列です</value>
  </data>
  <data name="Bit_ReadableString_Summary" xml:space="preserve">
    <value>ビットが読みやすい文字列を取得します</value>
  </data>
  <data name="Bit_ReadableString_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_ReadableString_WithZeroPadding" xml:space="preserve">
    <value>０で埋めるかどうかです</value>
  </data>
  <data name="Bit_Reverse_Result" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_Reverse_Summary" xml:space="preserve">
    <value>ビット列を反転した値を取得します</value>
  </data>
  <data name="Bit_Reverse_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_RightShift_A" xml:space="preserve">
    <value>１つ目の引数です</value>
  </data>
  <data name="Bit_RightShift_B" xml:space="preserve">
    <value>２つ目の引数です</value>
  </data>
  <data name="Bit_RightShift_Summary" xml:space="preserve">
    <value>右にビットシフトした値を取得します</value>
  </data>
  <data name="Bit_RightShift_Value" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_TrailingZerosCount_Count" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_TrailingZerosCount_Summary" xml:space="preserve">
    <value>末尾の０の個数を取得します</value>
  </data>
  <data name="Bit_TrailingZerosCount_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="Bit_Xor_A" xml:space="preserve">
    <value>１つ目の引数です</value>
  </data>
  <data name="Bit_Xor_B" xml:space="preserve">
    <value>２つ目の引数です</value>
  </data>
  <data name="Bit_Xor_Summary" xml:space="preserve">
    <value>ビット排他和を計算します</value>
  </data>
  <data name="Bit_Xor_Value" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_ZerosCount_Count" xml:space="preserve">
    <value>結果です</value>
  </data>
  <data name="Bit_ZerosCount_Summary" xml:space="preserve">
    <value>０になっているビットの個数を取得します</value>
  </data>
  <data name="Bit_ZerosCount_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="DateTime_AddDays_DateTime" xml:space="preserve">
    <value>対象の日時です</value>
  </data>
  <data name="DateTime_AddDays_Days" xml:space="preserve">
    <value>日数です</value>
  </data>
  <data name="DateTime_AddDays_Summary" xml:space="preserve">
    <value>日時に日数を追加します</value>
  </data>
  <data name="DateTime_AddDays_Value" xml:space="preserve">
    <value>日数が追加された日時です</value>
  </data>
  <data name="DateTime_AddHours_DateTime" xml:space="preserve">
    <value>対象の日時です</value>
  </data>
  <data name="DateTime_AddHours_Hours" xml:space="preserve">
    <value>時間です</value>
  </data>
  <data name="DateTime_AddHours_Summary" xml:space="preserve">
    <value>日時に時間を追加します</value>
  </data>
  <data name="DateTime_AddHours_Value" xml:space="preserve">
    <value>時間が追加された日時です</value>
  </data>
  <data name="DateTime_AddMilliseconds_DateTime" xml:space="preserve">
    <value>対象の日時です</value>
  </data>
  <data name="DateTime_AddMilliseconds_Milliseconds" xml:space="preserve">
    <value>ミリ秒です</value>
  </data>
  <data name="DateTime_AddMilliseconds_Summary" xml:space="preserve">
    <value>日時にミリ秒を追加します</value>
  </data>
  <data name="DateTime_AddMilliseconds_Value" xml:space="preserve">
    <value>ミリ秒が追加された日時です</value>
  </data>
  <data name="DateTime_AddMinutes_DateTime" xml:space="preserve">
    <value>対象の日時です</value>
  </data>
  <data name="DateTime_AddMinutes_Minutes" xml:space="preserve">
    <value>分です</value>
  </data>
  <data name="DateTime_AddMinutes_Summary" xml:space="preserve">
    <value>日時に分を追加します</value>
  </data>
  <data name="DateTime_AddMinutes_Value" xml:space="preserve">
    <value>分が追加された日時です</value>
  </data>
  <data name="DateTime_AddMonths_DateTime" xml:space="preserve">
    <value>対象の日時です</value>
  </data>
  <data name="DateTime_AddMonths_Months" xml:space="preserve">
    <value>月です</value>
  </data>
  <data name="DateTime_AddMonths_Summary" xml:space="preserve">
    <value>日時に月を追加します</value>
  </data>
  <data name="DateTime_AddMonths_Value" xml:space="preserve">
    <value>月が追加された日時です</value>
  </data>
  <data name="DateTime_AddSeconds_DateTime" xml:space="preserve">
    <value>対象の日時です</value>
  </data>
  <data name="DateTime_AddSeconds_Seconds" xml:space="preserve">
    <value>秒です</value>
  </data>
  <data name="DateTime_AddSeconds_Summary" xml:space="preserve">
    <value>日時に秒を追加します</value>
  </data>
  <data name="DateTime_AddSeconds_Value" xml:space="preserve">
    <value>秒が追加された日時です</value>
  </data>
  <data name="DateTime_AddYears_DateTime" xml:space="preserve">
    <value>対象の日時です</value>
  </data>
  <data name="DateTime_AddYears_Summary" xml:space="preserve">
    <value>日時に年を追加します</value>
  </data>
  <data name="DateTime_AddYears_Value" xml:space="preserve">
    <value>年が追加された日時です</value>
  </data>
  <data name="DateTime_AddYears_Years" xml:space="preserve">
    <value>年です</value>
  </data>
  <data name="DateTime_Add_DateTime" xml:space="preserve">
    <value>対象の日時です</value>
  </data>
  <data name="DateTime_Add_Summary" xml:space="preserve">
    <value>日時に時間を追加します</value>
  </data>
  <data name="DateTime_Add_Time" xml:space="preserve">
    <value>時間です</value>
  </data>
  <data name="DateTime_Add_Value" xml:space="preserve">
    <value>時間が追加された日時です</value>
  </data>
  <data name="DateTime_Compare_DateTime1" xml:space="preserve">
    <value>１つ目の日時です</value>
  </data>
  <data name="DateTime_Compare_DateTime2" xml:space="preserve">
    <value>２つ目の日時です</value>
  </data>
  <data name="DateTime_Compare_Result" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="DateTime_Compare_Summary" xml:space="preserve">
    <value>日時を比較します</value>
  </data>
  <data name="DateTime_Equal_Summary" xml:space="preserve">
    <value>日時が等しいかどうかを調べます</value>
  </data>
  <data name="DateTime_Equal_Value" xml:space="preserve">
    <value>日時が等しいかどうかです</value>
  </data>
  <data name="DateTime_FromWithMillisecond_Summary" xml:space="preserve">
    <value>年月日時分秒ミリ秒から日時を作成します</value>
  </data>
  <data name="DateTime_FromWithSecond_Summary" xml:space="preserve">
    <value>年月日時分秒から日時を作成します</value>
  </data>
  <data name="DateTime_From_Day" xml:space="preserve">
    <value>日です</value>
  </data>
  <data name="DateTime_From_Hour" xml:space="preserve">
    <value>時です</value>
  </data>
  <data name="DateTime_From_Millisecond" xml:space="preserve">
    <value>ミリ秒です</value>
  </data>
  <data name="DateTime_From_Minute" xml:space="preserve">
    <value>分です</value>
  </data>
  <data name="DateTime_From_Month" xml:space="preserve">
    <value>月です</value>
  </data>
  <data name="DateTime_From_Second" xml:space="preserve">
    <value>秒です</value>
  </data>
  <data name="DateTime_From_Summary" xml:space="preserve">
    <value>年月日から日時を作成します</value>
  </data>
  <data name="DateTime_From_Value" xml:space="preserve">
    <value>作成した日時です</value>
  </data>
  <data name="DateTime_From_Year" xml:space="preserve">
    <value>年です</value>
  </data>
  <data name="DateTime_IsLeapYear_Summary" xml:space="preserve">
    <value>閏年かどうかを取得します</value>
  </data>
  <data name="DateTime_IsLeapYear_Value" xml:space="preserve">
    <value>閏年かどうかです</value>
  </data>
  <data name="DateTime_IsLeapYear_Year" xml:space="preserve">
    <value>対象の年です</value>
  </data>
  <data name="DateTime_Max_Summary" xml:space="preserve">
    <value>日時の最大を取得します</value>
  </data>
  <data name="DateTime_Max_Value" xml:space="preserve">
    <value>日時の最大です</value>
  </data>
  <data name="DateTime_Min_Summary" xml:space="preserve">
    <value>日時の最小を取得します</value>
  </data>
  <data name="DateTime_Min_Value" xml:space="preserve">
    <value>日時の最小です</value>
  </data>
  <data name="DateTime_Now_Now" xml:space="preserve">
    <value>現在の日時です</value>
  </data>
  <data name="DateTime_Now_Summary" xml:space="preserve">
    <value>現在の日時を取得します</value>
  </data>
  <data name="DateTime_Parse_Summary" xml:space="preserve">
    <value>日時をパースします</value>
  </data>
  <data name="DateTime_SubtractDateTime_DateTime1" xml:space="preserve">
    <value>１つ目の日時です</value>
  </data>
  <data name="DateTime_SubtractDateTime_DateTime2" xml:space="preserve">
    <value>２つ目の日時です</value>
  </data>
  <data name="DateTime_SubtractDateTime_Summary" xml:space="preserve">
    <value>日時の間隔を計算します</value>
  </data>
  <data name="DateTime_SubtractDateTime_Value" xml:space="preserve">
    <value>時間間隔です</value>
  </data>
  <data name="DateTime_SubtractTimeSpan_DateTime" xml:space="preserve">
    <value>日時です</value>
  </data>
  <data name="DateTime_SubtractTimeSpan_Summary" xml:space="preserve">
    <value>日時から時間間隔を引いた日時を計算します</value>
  </data>
  <data name="DateTime_SubtractTimeSpan_Time" xml:space="preserve">
    <value>時間間隔です</value>
  </data>
  <data name="DateTime_SubtractTimeSpan_Value" xml:space="preserve">
    <value>時間間隔が引かれた日時です</value>
  </data>
  <data name="DateTime_Today_Summary" xml:space="preserve">
    <value>今日の日時を取得します</value>
  </data>
  <data name="DateTime_Today_Today" xml:space="preserve">
    <value>今日の日時です</value>
  </data>
  <data name="DateTime_ToLocalTime_Summary" xml:space="preserve">
    <value>ローカル時間に直した日時を取得します</value>
  </data>
  <data name="DateTime_ToLocalTime_Value" xml:space="preserve">
    <value>日時です</value>
  </data>
  <data name="DateTime_ToString_DateTime" xml:space="preserve">
    <value>対象の日時です</value>
  </data>
  <data name="DateTime_ToString_Format" xml:space="preserve">
    <value>フォーマットです</value>
  </data>
  <data name="DateTime_ToString_Summary" xml:space="preserve">
    <value>日時をフォーマットを指定して文字列に変換します</value>
  </data>
  <data name="DateTime_ToString_Value" xml:space="preserve">
    <value>変換された文字列です</value>
  </data>
  <data name="DateTime_ToUniversalTime_Summary" xml:space="preserve">
    <value>ユニバーサル時間に直した日時を取得します</value>
  </data>
  <data name="DateTime_ToUniversalTime_Value" xml:space="preserve">
    <value>日時です</value>
  </data>
  <data name="DateTime_UtcNow_Summary" xml:space="preserve">
    <value>UTCにおける現在の日時を取得します</value>
  </data>
  <data name="DateTime_UtcNow_UtcNow" xml:space="preserve">
    <value>UTCにおける現在の日時です</value>
  </data>
  <data name="DateTime_Value_Date" xml:space="preserve">
    <value>日の情報のみもつ日時です</value>
  </data>
  <data name="DateTime_Value_Day" xml:space="preserve">
    <value>日です</value>
  </data>
  <data name="DateTime_Value_DayOfWeek" xml:space="preserve">
    <value>曜日です</value>
  </data>
  <data name="DateTime_Value_DayOfYear" xml:space="preserve">
    <value>年間での積算日です</value>
  </data>
  <data name="DateTime_Value_Hour" xml:space="preserve">
    <value>時です</value>
  </data>
  <data name="DateTime_Value_Millisecond" xml:space="preserve">
    <value>ミリ秒です</value>
  </data>
  <data name="DateTime_Value_Minute" xml:space="preserve">
    <value>分です</value>
  </data>
  <data name="DateTime_Value_Month" xml:space="preserve">
    <value>月です</value>
  </data>
  <data name="DateTime_Value_Second" xml:space="preserve">
    <value>秒です</value>
  </data>
  <data name="DateTime_Value_Summary" xml:space="preserve">
    <value>日時の情報を取得します</value>
  </data>
  <data name="DateTime_Value_TimeOfDay" xml:space="preserve">
    <value>日時の時間です</value>
  </data>
  <data name="DateTime_Value_Value" xml:space="preserve">
    <value>対象の日時です</value>
  </data>
  <data name="DateTime_Value_Year" xml:space="preserve">
    <value>年です</value>
  </data>
  <data name="TimeSpan_Add_Summary" xml:space="preserve">
    <value>時間間隔の加算を行います</value>
  </data>
  <data name="TimeSpan_Add_Value" xml:space="preserve">
    <value>加算された時間間隔です</value>
  </data>
  <data name="TimeSpan_Compare_Result" xml:space="preserve">
    <value>比較した結果です</value>
  </data>
  <data name="TimeSpan_Compare_Summary" xml:space="preserve">
    <value>時間間隔を比較します</value>
  </data>
  <data name="TimeSpan_Compare_TimeSpan1" xml:space="preserve">
    <value>１つ目の時間間隔です</value>
  </data>
  <data name="TimeSpan_Compare_TimeSpan2" xml:space="preserve">
    <value>２つ目の時間間隔です</value>
  </data>
  <data name="TimeSpan_Duration_Summary" xml:space="preserve">
    <value>時間間隔の絶対値を取得します</value>
  </data>
  <data name="TimeSpan_Duration_Value" xml:space="preserve">
    <value>時間間隔の絶対値です</value>
  </data>
  <data name="TimeSpan_Equal_Summary" xml:space="preserve">
    <value>時間間隔が等しいかどうかを調べます</value>
  </data>
  <data name="TimeSpan_Equal_Value" xml:space="preserve">
    <value>時間間隔が等しいかどうかです</value>
  </data>
  <data name="TimeSpan_FromDays_Days" xml:space="preserve">
    <value>日です</value>
  </data>
  <data name="TimeSpan_FromDays_Summary" xml:space="preserve">
    <value>日から時間間隔を作成します</value>
  </data>
  <data name="TimeSpan_FromDays_Value" xml:space="preserve">
    <value>時間間隔です</value>
  </data>
  <data name="TimeSpan_FromHours_Hours" xml:space="preserve">
    <value>時です</value>
  </data>
  <data name="TimeSpan_FromHours_Summary" xml:space="preserve">
    <value>時から時間間隔を作成します</value>
  </data>
  <data name="TimeSpan_FromHours_Value" xml:space="preserve">
    <value>時間間隔です</value>
  </data>
  <data name="TimeSpan_FromMilliseconds_Milliseconds" xml:space="preserve">
    <value>ミリ秒です</value>
  </data>
  <data name="TimeSpan_FromMilliseconds_Summary" xml:space="preserve">
    <value>ミリ秒から時間間隔を作成します</value>
  </data>
  <data name="TimeSpan_FromMilliseconds_Value" xml:space="preserve">
    <value>時間間隔です</value>
  </data>
  <data name="TimeSpan_FromMinutes_Minutes" xml:space="preserve">
    <value>分です</value>
  </data>
  <data name="TimeSpan_FromMinutes_Summary" xml:space="preserve">
    <value>分から時間間隔を作成します</value>
  </data>
  <data name="TimeSpan_FromMinutes_Value" xml:space="preserve">
    <value>時間間隔です</value>
  </data>
  <data name="TimeSpan_FromSeconds_Seconds" xml:space="preserve">
    <value>秒です</value>
  </data>
  <data name="TimeSpan_FromSeconds_Summary" xml:space="preserve">
    <value>秒から時間間隔を作成します</value>
  </data>
  <data name="TimeSpan_FromSeconds_Value" xml:space="preserve">
    <value>時間間隔です</value>
  </data>
  <data name="TimeSpan_Max_Summary" xml:space="preserve">
    <value>時間間隔の最大値を取得します</value>
  </data>
  <data name="TimeSpan_Max_Value" xml:space="preserve">
    <value>時間間隔の最大値です</value>
  </data>
  <data name="TimeSpan_Min_Summary" xml:space="preserve">
    <value>時間間隔の最小値を取得します</value>
  </data>
  <data name="TimeSpan_Min_Value" xml:space="preserve">
    <value>時間間隔の最小値です</value>
  </data>
  <data name="TimeSpan_Negate_Summary" xml:space="preserve">
    <value>時間間隔の符号を反転した時間間隔を取得します</value>
  </data>
  <data name="TimeSpan_Negate_Value" xml:space="preserve">
    <value>時間間隔です</value>
  </data>
  <data name="TimeSpan_Parse_Summary" xml:space="preserve">
    <value>時間間隔をパースします</value>
  </data>
  <data name="TimeSpan_Subtract_Summary" xml:space="preserve">
    <value>時間間隔の減算を行います</value>
  </data>
  <data name="TimeSpan_Subtract_Value" xml:space="preserve">
    <value>減算された結果です</value>
  </data>
  <data name="TimeSpan_ToString_Format" xml:space="preserve">
    <value>フォーマットです</value>
  </data>
  <data name="TimeSpan_ToString_Summary" xml:space="preserve">
    <value>時間間隔をフォーマットを指定して文字列に変換します</value>
  </data>
  <data name="TimeSpan_ToString_TimeSpan" xml:space="preserve">
    <value>対象の時間間隔です</value>
  </data>
  <data name="TimeSpan_ToString_Value" xml:space="preserve">
    <value>変換された文字列です</value>
  </data>
  <data name="TimeSpan_Value_Days" xml:space="preserve">
    <value>日の部分です</value>
  </data>
  <data name="TimeSpan_Value_Hours" xml:space="preserve">
    <value>時の部分です</value>
  </data>
  <data name="TimeSpan_Value_Milliseconds" xml:space="preserve">
    <value>ミリ秒の部分です</value>
  </data>
  <data name="TimeSpan_Value_Minutes" xml:space="preserve">
    <value>分の部分です</value>
  </data>
  <data name="TimeSpan_Value_Seconds" xml:space="preserve">
    <value>秒の部分です</value>
  </data>
  <data name="TimeSpan_Value_Summary" xml:space="preserve">
    <value>時間間隔の情報を取得します</value>
  </data>
  <data name="TimeSpan_Value_TotalDays" xml:space="preserve">
    <value>日で表した間隔です</value>
  </data>
  <data name="TimeSpan_Value_TotalHours" xml:space="preserve">
    <value>時で表した間隔です</value>
  </data>
  <data name="TimeSpan_Value_TotalMilliseconds" xml:space="preserve">
    <value>ミリ秒で表した間隔です</value>
  </data>
  <data name="TimeSpan_Value_TotalMinutes" xml:space="preserve">
    <value>分で表した間隔です</value>
  </data>
  <data name="TimeSpan_Value_TotalSeconds" xml:space="preserve">
    <value>秒で表した間隔です</value>
  </data>
  <data name="TimeSpan_Value_Value" xml:space="preserve">
    <value>対象の時間間隔です</value>
  </data>
  <data name="TimeSpan_Zero_Summary" xml:space="preserve">
    <value>ゼロの時間間隔を取得します</value>
  </data>
  <data name="TimeSpan_Zero_Value" xml:space="preserve">
    <value>ゼロの時間間隔です</value>
  </data>
  <data name="Pair_FromKeyValue_Key" xml:space="preserve">
    <value>キーを設定します</value>
  </data>
  <data name="Pair_FromKeyValue_Pair" xml:space="preserve">
    <value>ペアです</value>
  </data>
  <data name="Pair_FromKeyValue_Summary" xml:space="preserve">
    <value>キーと値からペアを作成します</value>
  </data>
  <data name="Pair_FromKeyValue_Value" xml:space="preserve">
    <value>値を設定します</value>
  </data>
  <data name="Pair_Value_Key" xml:space="preserve">
    <value>キーです</value>
  </data>
  <data name="Pair_Value_Pair" xml:space="preserve">
    <value>ペアを設定します</value>
  </data>
  <data name="Pair_Value_Summary" xml:space="preserve">
    <value>ペアからキーと値を取得します</value>
  </data>
  <data name="Pair_Value_Value" xml:space="preserve">
    <value>値です</value>
  </data>
  <data name="String_Split_A" xml:space="preserve">
    <value>対象の文字列です</value>
  </data>
  <data name="String_Split_RemoveEmpty" xml:space="preserve">
    <value>分割後からの文字列を取り除くかどうかです</value>
  </data>
  <data name="String_Split_Separators" xml:space="preserve">
    <value>セパレーターです</value>
  </data>
  <data name="String_Split_Summary" xml:space="preserve">
    <value>文字列を分割します</value>
  </data>
  <data name="String_Split_Value" xml:space="preserve">
    <value>分割された文字列の一覧です</value>
  </data>
  <data name="HashSet_Count_Summary" xml:space="preserve">
    <value>セットの要素の個数を取得します</value>
  </data>
  <data name="HashSet_Count_Value" xml:space="preserve">
    <value>セットの要素の個数です</value>
  </data>
  <data name="Stream_ReadAllText_Encoding" xml:space="preserve">
    <value>読み取る際のエンコードを設定します</value>
  </data>
  <data name="Stream_ReadAllText_Summary" xml:space="preserve">
    <value>ストリームの全てのテキストを読み取ります</value>
  </data>
  <data name="Stream_ReadAllText_Value" xml:space="preserve">
    <value>全てのテキストです</value>
  </data>
</root>