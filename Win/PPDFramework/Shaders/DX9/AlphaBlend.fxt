float2 WidthHeight;
float4x4 Projection;

struct DrawInformation
{
    float4x4 Matrix;
    float4 OverlayColor;
    float Alpha;
};

DrawInformation DrawInfo;

struct FilterInformation
{
	float4 Arg1;
	float4 Arg2;
	float4 Arg3;
};

FilterInformation FilterInfo;

texture Texture;
sampler TextureSampler = sampler_state
{
	Texture = < Texture >;
	MinFilter = Linear;
	MagFilter = Linear;
	MipFilter = None;
	AddressU = Clamp;
	AddressV = Clamp;
};

texture LastRenderTargetTexture;
sampler LastRenderTargetTextureSampler = sampler_state
{
	Texture = < LastRenderTargetTexture >;
	MinFilter = Linear;
	MagFilter = Linear;
	MipFilter = None;
	AddressU = Clamp;
	AddressV = Clamp;
};

texture MaskTexture;
sampler MaskTextureSampler = sampler_state
{
	Texture = < MaskTexture >;
	MinFilter = Linear;
	MagFilter = Linear;
	MipFilter = None;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertexShaderInput
{
	float4 Position : POSITION0;
	float4 Color    : COLOR0;
	float2 TexCoord : TEXCOORD0;
};

struct VertexShaderOutput
{
	float4 Position : POSITION0;
	float4 Color    : COLOR0;
	float2 TexCoord : TEXCOORD0;
	float2 LastRenderTargetTexCoord : TEXCOORD1;
};

#include "Blend.fx"
#include "Filter.fx"

VertexShaderOutput VertexShaderFunction(VertexShaderInput input)
{
	VertexShaderOutput output = (VertexShaderOutput)0;
    float4 screen = mul(input.Position, DrawInfo.Matrix);
    output.Position  = mul(screen, Projection);
	output.TexCoord = input.TexCoord;
	output.Color = input.Color;
	output.LastRenderTargetTexCoord = float2((screen.x + 0.5f) / WidthHeight.x, (screen.y + 0.5f) / WidthHeight.y);
	return output;
}

float GetMask(float2 texCoord) {
    return tex2D(MaskTextureSampler, texCoord).a;
}

float4 GetSrcColor(float2 texCoord, float2 screenTexCoord, uniform bool paEnabled, uniform bool maskEnabled, uniform int filterType) {
	float4 srcColor = tex2D(TextureSampler, texCoord);
	srcColor.a *= DrawInfo.Alpha;
    if(maskEnabled){
        float maskAlpha = GetMask(screenTexCoord);
        srcColor.a *= maskAlpha;
        if(paEnabled){
            srcColor.rgb *= maskAlpha;
        }
    }
    if(paEnabled){
        srcColor.rgb = srcColor.rgb * (1 - DrawInfo.OverlayColor.a) + DrawInfo.OverlayColor.rgb * DrawInfo.OverlayColor.a * srcColor.a;
    }else{
        srcColor.rgb = srcColor.rgb * (1 - DrawInfo.OverlayColor.a) + DrawInfo.OverlayColor.rgb * DrawInfo.OverlayColor.a;
    }
    if(filterType == 0){
        return ColorFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType == 1) {
		return MaxGrayScaleFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType == 2) {
		return MiddleGrayScaleFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType == 3) {
		return NTSCGrayScaleFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType  == 4) {
		return HDTVGrayScaleFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType == 5) {
		return AverageGrayScaleFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType == 6) {
		return GreenGrayScaleFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType == 7) {
		return MedianGrayScaleFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType == 8) {
		return HueFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType == 9) {
		return SaturationFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType == 10) {
		return BrightnessFilter(srcColor, FilterInfo, paEnabled);
	}
	else if (filterType == 11) {
		return InvertFilter(srcColor, FilterInfo, paEnabled);
    }
	return srcColor;
}

float GetSrcAlpha(float2 texCoord, float2 screenTexCoord, uniform bool maskEnabled) {
  	float4 srcColor = tex2D(TextureSampler, texCoord);
	srcColor.a *= DrawInfo.Alpha;
    if(maskEnabled){
        return srcColor.a * GetMask(screenTexCoord);
    }
    return srcColor.a;
}

#params masks {MaskEnabled: true, MaskDisabled: false}

float4 PixelShaderIncludeMaskFunction(VertexShaderOutput input, uniform bool maskEnabled) : COLOR0{
    return float4(0, 0, 0, max(tex2D(LastRenderTargetTextureSampler, input.LastRenderTargetTexCoord).a,
        GetSrcAlpha(input.TexCoord, input.LastRenderTargetTexCoord, maskEnabled) * input.Color.a));
}
float4 PixelShaderExcludeMaskFunction(VertexShaderOutput input, uniform bool maskEnabled) : COLOR0{
    return float4(0, 0, 0, min(tex2D(LastRenderTargetTextureSampler, input.LastRenderTargetTexCoord).a,
        1 - GetSrcAlpha(input.TexCoord, input.LastRenderTargetTexCoord, maskEnabled) * input.Color.a));
}
#foreach(masks, maskKey => maskEnabled)
technique IncludeMask$(maskKey){
	pass p0 {
		CullMode = none;
        AlphaBlendEnable = false;
		VertexShader = compile vs_3_0 VertexShaderFunction();
		PixelShader = compile ps_3_0 PixelShaderIncludeMaskFunction($(maskEnabled));
	}
}
technique ExcludeMask$(maskKey){
	pass p0 {
		CullMode = none;
        AlphaBlendEnable = false;
		VertexShader = compile vs_3_0 VertexShaderFunction();
		PixelShader = compile ps_3_0 PixelShaderExcludeMaskFunction($(maskEnabled));
	}
}
#end

#params pas {PAEnabled: true, PADisabled: false}
#params blends [Normal, Multiply, Screen, Overlay, HardLight, ColorDodge, LinearDodge, Difference]
#params filters {None: -1, Color: 0, MaxGrayScale: 1, MiddleGrayScale: 2, NTSCGrayScale: 3, HDTVGrayScale: 4, AverageGrayScale: 5, GreenGrayScale: 6, MedianGrayScale: 7, Hue: 8, Saturation: 9, Brightness: 10, Invert: 11}
#foreach(blends, blend)
float4 PixelShader$(blend)Function(VertexShaderOutput input, uniform bool paEnabled, uniform bool maskEnabled, uniform int filterType) : COLOR0{
	float4 destColor = tex2D(LastRenderTargetTextureSampler, input.LastRenderTargetTexCoord);
	float4 srcColor = GetSrcColor(input.TexCoord, input.LastRenderTargetTexCoord, paEnabled, maskEnabled, filterType);
    srcColor *= input.Color;
	return $(blend)(destColor, srcColor);
}
#foreach(pas, pa => paEnabled)
#foreach(masks, maskKey => maskEnabled)
#foreach(filters, filterKey => filterType)
technique $(blend)Blend$(pa)$(maskKey)$(filterKey)Filter{
	pass p0 {
		CullMode = none;
        AlphaBlendEnable = false;
		VertexShader = compile vs_3_0 VertexShaderFunction();
		PixelShader = compile ps_3_0 PixelShader$(blend)Function($(paEnabled), $(maskEnabled), $(filterType));
	}
}
#end
#end
#end
#end