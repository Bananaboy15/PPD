float2 WidthHeight;
float4x4 Projection;
float4 Color;
float Thickness;
int Thickness2;
float ActualThickness;

texture LastRenderTargetTexture;
sampler LastRenderTargetTextureSampler = sampler_state
{
	Texture = < LastRenderTargetTexture>;
	MinFilter = Linear;
	MagFilter = Linear;
	MipFilter = None;
	AddressU = Clamp;
	AddressV = Clamp;
};

texture FilterTexture;
sampler FilterTextureSampler = sampler_state
{
	Texture = < FilterTexture >;
	MinFilter = Linear;
	MagFilter = Linear;
	MipFilter = None;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertexShaderInput
{
	float4 Position : POSITION0;
	float4 Color    : COLOR0;
	float2 TexCoord : TEXCOORD0;
};

struct VertexShaderOutput
{
	float4 Position : POSITION0;
	float4 Color    : COLOR0;
	float2 TexCoord : TEXCOORD0;
};

#include "Blend.fx"

VertexShaderOutput VertexShaderFunction(VertexShaderInput input)
{
	VertexShaderOutput output = (VertexShaderOutput)0;
	output.Position = mul(input.Position, Projection);
	output.TexCoord = input.TexCoord;
	output.Color = input.Color;
	return output;
}

float Outside(VertexShaderOutput input) {
	float maxAlpha = 0;
	float start = Thickness / 2;
	for (int i = 0; i < Thickness2; i++) {
		float x = -start + i % Thickness;
		float y = -start + i / Thickness;
		float alpha = 0;
		float distance = sqrt(x * x + y * y);
		if (distance <= ActualThickness) {
			alpha = tex2D(FilterTextureSampler, input.TexCoord + float2(x / WidthHeight.x, y / WidthHeight.y)).a;
		}
		else if (distance <= ActualThickness + 1) {
			alpha = (1 - (distance - ActualThickness))*tex2D(FilterTextureSampler, input.TexCoord + float2(x / WidthHeight.x, y / WidthHeight.y)).a;
		}
		maxAlpha = max(maxAlpha, alpha);
	}
	return maxAlpha;
}

float Inside(VertexShaderOutput input) {
	float maxAlpha = 0;
	float start = Thickness / 2;
	for (int i = 0; i < Thickness2; i++) {
		float x = -start + i % Thickness;
		float y = -start + i / Thickness;
		float alpha = 0;
		float distance = sqrt(x * x + y * y);
		if (distance <= ActualThickness) {
			alpha = 1 - tex2D(FilterTextureSampler, input.TexCoord + float2(x / WidthHeight.x, y / WidthHeight.y)).a;
		}
		else if (distance <= ActualThickness + 1) {
			alpha = (distance - ActualThickness)*(1 - tex2D(FilterTextureSampler, input.TexCoord + float2(x / WidthHeight.x, y / WidthHeight.y)).a);
		}
		maxAlpha = max(maxAlpha, alpha);
	}
	return maxAlpha;
}

#params blends [Normal, Multiply, Screen, Overlay, HardLight, ColorDodge, LinearDodge, Difference]
#foreach(blends, blend)
float4 PixelShader$(blend)OutsideFunction(VertexShaderOutput input) : COLOR0{
	float maxAlpha = Outside(input);
	return $(blend)(tex2D(LastRenderTargetTextureSampler, input.TexCoord),
		float4(Color.rgb, Color.a * maxAlpha * (1 - tex2D(FilterTextureSampler, input.TexCoord).a)), false);
}

float4 PixelShader$(blend)InsideFunction(VertexShaderOutput input) : COLOR0{
	float maxAlpha = Inside(input);
	return $(blend)(tex2D(LastRenderTargetTextureSampler, input.TexCoord),
		float4(Color.rgb, Color.a * maxAlpha *  tex2D(FilterTextureSampler, input.TexCoord).a), false);
}

technique Outside$(blend)Border {
	pass p0 {
		CullMode = none;
		VertexShader = compile vs_3_0 VertexShaderFunction();
		PixelShader = compile ps_3_0 PixelShader$(blend)OutsideFunction();
	}
}

technique Inside$(blend)Border {
	pass p0 {
		CullMode = none;
		VertexShader = compile vs_3_0 VertexShaderFunction();
		PixelShader = compile ps_3_0 PixelShader$(blend)InsideFunction();
	}
}
#end